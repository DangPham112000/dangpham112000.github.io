<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on The Engineer Blogs</title>
    <link>https://dangpham112000.github.io/</link>
    <description>Recent content in Introduction on The Engineer Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Feb 2024 01:47:46 +0700</lastBuildDate>
    <atom:link href="https://dangpham112000.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP - UDP</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/tcp_udp/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/tcp_udp/</guid>
      <description>TCP - UDP#</description>
    </item>
    <item>
      <title>TLS - SSL</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/tls_ssl/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/tls_ssl/</guid>
      <description>TLS - SSL#</description>
    </item>
    <item>
      <title>HTTP</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/http/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/http/</guid>
      <description>HTTP#</description>
    </item>
    <item>
      <title>HTTPS</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/https/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/https/</guid>
      <description>HTTPS#</description>
    </item>
    <item>
      <title>WebRTC</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/webrtc/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/webrtc/</guid>
      <description>WebRTC#</description>
    </item>
    <item>
      <title>Websocket</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/websocket/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/websocket/</guid>
      <description>Websocket#</description>
    </item>
    <item>
      <title>gRPC</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/grpc/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/grpc/</guid>
      <description>gRPC#</description>
    </item>
    <item>
      <title>Communication</title>
      <link>https://dangpham112000.github.io/docs/research/be_protocol/communication/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/be_protocol/communication/</guid>
      <description>Communication#</description>
    </item>
    <item>
      <title>Event loop</title>
      <link>https://dangpham112000.github.io/docs/research/event_loop/</link>
      <pubDate>Tue, 05 Dec 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/event_loop/</guid>
      <description>Event loop#var name = &amp;#34;JS&amp;#34;; function execLater() { setTimeout(printName, 0); Promise .resolve() .then(() =&amp;gt; { console.log(&amp;#34;Promise resolve&amp;#34;); }); console.log(name); var name = &amp;#34;TS&amp;#34;; } printName(name); function printName() { console.log(name); } execLater(); Phase 1: the memory creation phase
name is declared and initialized equal &amp;quot;JS&amp;quot; execLater is declared and initialized printName is declared and initialized Phase 2: the code execution phase
printName is called and it prints &amp;quot;JS&amp;quot; execLater is called: Phase 1: name is assigned to undefined due to hoisting Phase 2: printName goes to the callback queue and wait for 0ms to be executed later The promise goes to the microtask queue printName is executed with the value of name is undefined name is assigned to &amp;quot;TS&amp;quot; but only in execLater scope Once the call stack is empty, the event loop pulls the promise to execute it as it has higher priority printName is called and print &amp;quot;JS&amp;quot; b/c it referents to the global scope The display order on the consoleJS undefined Promise resolve JS </description>
    </item>
    <item>
      <title>Process vs Thread</title>
      <link>https://dangpham112000.github.io/docs/research/process_vs_thread/</link>
      <pubDate>Tue, 05 Dec 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/process_vs_thread/</guid>
      <description>Process vs Thread#Program#A Program is an executable file containing a set of instructions and passively stored on disk
Process#A Process means a program is in execution. When a program is loaded into the memory and becomes active, the program becomes a process or processes
Thread#A Thread is the smallest unit of execution within a process
Process vs Thread#Process#The process requires some essential resources such as registers, program counter, and stack</description>
    </item>
    <item>
      <title>Chrome Architecture</title>
      <link>https://dangpham112000.github.io/docs/research/chrome_architecture/</link>
      <pubDate>Tue, 05 Dec 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/chrome_architecture/</guid>
      <description>Chrome Architecture#Prerequisites#Read process vs thread first if you don&amp;rsquo;t have any process and thread concept in your mind
Browser Architecture#When you start an application, a process is created. The program might create thread(s) to help it do work, but that&amp;rsquo;s optional. The Operating System gives the process a &amp;ldquo;slab&amp;rdquo; of memory to work with and all application state is kept in that private memory space.</description>
    </item>
    <item>
      <title>AWS Overview</title>
      <link>https://dangpham112000.github.io/docs/research/aws_overview/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/aws_overview/</guid>
      <description>AWS Overview#Slide#Types of Cloud Computing#EC2 - Elastic Compute Cloud#EC2 = Infrastructure as a Service (IaaS) On-Demand Instances – short workload, predictable pricing, pay by second Has the highest cost Recommended for short-term and un-interrupted workloads, where you can&amp;rsquo;t predict how the application will behave Reserved (1 &amp;amp; 3 years) Reserved Instances – long workloads Recommended for steady-state usage applications (think database) Convertible Reserved Instances – long workloads with flexible instances Savings Plans (1 &amp;amp; 3 years) – commitment to an amount of usage, long workload Spot Instances – short workloads, cheap, can lose instances (less reliable) The MOST cost-efficient Dedicated Hosts – book an entire physical server, control instance placement The most expensive option Dedicated Instances – no other customers will share your hardware No control over instance placement Capacity Reservations – reserve capacity in a specific AZ for any duration AMI - Amazon Machine Image#AMI are a customization of an EC2 instance AMI are built for a specific region (and can be copied across regions) You can launch EC2 instances from: A Public AMI: AWS provided Your own AMI: you make and maintain them yourself An AWS Marketplace AMI: an AMI someone else made (and potentially sells) EC2 Image Builder#Used to automate the creation of Virtual Machines or container images</description>
    </item>
    <item>
      <title>Encryption</title>
      <link>https://dangpham112000.github.io/docs/research/encryption/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/encryption/</guid>
      <description>Encryption#</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://dangpham112000.github.io/docs/tips/git/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/tips/git/</guid>
      <description>GIT TIPS#Terminology#HEAD: your current local working branch origin: the address to your remote git, represent for remote repo tracked file: the file git already had before, so when you edit it, git know this file is modified (M files)
untracked, new file: the file recently add and git don’t know anything about it (U files)
Commit#git add . git commit -m &amp;#34;commit message&amp;#34; These 2 commands can combie into 1</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://dangpham112000.github.io/docs/research/security/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/security/</guid>
      <description>Security#DDOS#Backdoor attack#SQL injection#Cross-site scripting (XSS) attack#Cross-site request forgery (CSRF) attack#Cross-domain access attack#Syn flood attack#Relay attack#Man in the middle attack#request modify#response modify#</description>
    </item>
    <item>
      <title>Unit Test</title>
      <link>https://dangpham112000.github.io/docs/tips/unit_test/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/tips/unit_test/</guid>
      <description>Unit Test#Reset all global variables for each unit test case#What environment the unit test cases are running on: Browser or Nodejs?#Because Nodejs does not have browser APIs Using Karma to run browser&amp;rsquo;s unit test Using JS-DOM but it&amp;rsquo;s missing a lot of browser APIs Work only when running alone#Scenario: A unit test case only pass when running alone but fail when running with other test casesCheck:</description>
    </item>
    <item>
      <title>Design HashMap</title>
      <link>https://dangpham112000.github.io/docs/problems/design_hashmap/</link>
      <pubDate>Mon, 12 Feb 2024 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/problems/design_hashmap/</guid>
      <description>Design HashMap#Overview#Its other names: hash table, map, unordered map, dictionary
A hash table is a data structure that you can use to store data in key-value format with direct access to its items in constant time
The most valuable aspect of a hash table over other abstract data structures is its speed to perform insertion, deletion, and search operations. Hash tables can do them all in constant time</description>
    </item>
    <item>
      <title>Knight Dialer</title>
      <link>https://dangpham112000.github.io/docs/problems/knight_dialer/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/problems/knight_dialer/</guid>
      <description>Knight dialer#Description#The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:
A chess knight can move as indicated in the chess diagram below: We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.</description>
    </item>
  </channel>
</rss>
