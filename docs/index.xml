<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on The Engineer Blogs</title>
    <link>https://dangpham112000.github.io/docs/</link>
    <description>Recent content in Docs on The Engineer Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Nov 2023 01:47:46 +0700</lastBuildDate>
    <atom:link href="https://dangpham112000.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BE Protocol</title>
      <link>https://dangpham112000.github.io/docs/be-protocol/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/be-protocol/</guid>
      <description>Backend Protocol#What is a protocol?#A system that allows two parties to communicate A protocol is designed with a set of properties Depending on the purpose of the protocol TCP, UDP, HTTP, gRPC, FTP The application protocols (HTTP/1.1, HTTP/2, HTTP/3) run on top of transport protocols (TCP, UDP) Protocol properties#Data format Text based (plain text, JSON, XML) Binary (protobuf, RESP, h2, h3) Transfer mode Message based (UDP, HTTaP) Stream (TCP, WebRTC) Addressing system DNS name, IP, MAC Directionality Bidirectional (TCP) Unidirectional (HTTP) Full/Half duplex State Stateful (TCP, gRPC, apache thrift) Stateless (UDP, HTTP) Routing Proxies, Gateways Flow &amp;amp; Congestion control TCP (Flow &amp;amp; Congestion) UDP (No control) Error management Error code Retries and timeouts Why do we need a communication model?</description>
    </item>
  </channel>
</rss>
