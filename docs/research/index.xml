<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RESEARCH on The Engineer Blogs</title>
    <link>https://dangpham112000.github.io/docs/research/</link>
    <description>Recent content in RESEARCH on The Engineer Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Dec 2023 01:47:46 +0700</lastBuildDate>
    <atom:link href="https://dangpham112000.github.io/docs/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chrome Architecture</title>
      <link>https://dangpham112000.github.io/docs/research/chrome_architecture/</link>
      <pubDate>Tue, 05 Dec 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/chrome_architecture/</guid>
      <description>Chrome Architecture#Prerequisites#Read process vs thread first if you don&amp;rsquo;t have any process and thread concept in your mind
Browser Architecture#When you start an application, a process is created. The program might create thread(s) to help it do work, but that&amp;rsquo;s optional. The Operating System gives the process a &amp;ldquo;slab&amp;rdquo; of memory to work with and all application state is kept in that private memory space.</description>
    </item>
    <item>
      <title>Process vs Thread</title>
      <link>https://dangpham112000.github.io/docs/research/process_vs_thread/</link>
      <pubDate>Tue, 05 Dec 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/process_vs_thread/</guid>
      <description>Process vs Thread#Program#A Program is an executable file containing a set of instructions and passively stored on disk
Process#A Process means a program is in execution. When a program is loaded into the memory and becomes active, the program becomes a process or processes
Thread#A Thread is the smallest unit of execution within a process
Process vs Thread#Process#The process requires some essential resources such as registers, program counter, and stack</description>
    </item>
    <item>
      <title>AWS Overview</title>
      <link>https://dangpham112000.github.io/docs/research/aws_overview/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/aws_overview/</guid>
      <description>AWS Overview#Slide#Types of Cloud Computing#EC2 - Elastic Compute Cloud#EC2 = Infrastructure as a Service (IaaS) On-Demand Instances – short workload, predictable pricing, pay by second Has the highest cost Recommended for short-term and un-interrupted workloads, where you can&amp;rsquo;t predict how the application will behave Reserved (1 &amp;amp; 3 years) Reserved Instances – long workloads Recommended for steady-state usage applications (think database) Convertible Reserved Instances – long workloads with flexible instances Savings Plans (1 &amp;amp; 3 years) – commitment to an amount of usage, long workload Spot Instances – short workloads, cheap, can lose instances (less reliable) The MOST cost-efficient Dedicated Hosts – book an entire physical server, control instance placement The most expensive option Dedicated Instances – no other customers will share your hardware No control over instance placement Capacity Reservations – reserve capacity in a specific AZ for any duration AMI - Amazon Machine Image#AMI are a customization of an EC2 instance AMI are built for a specific region (and can be copied across regions) You can launch EC2 instances from: A Public AMI: AWS provided Your own AMI: you make and maintain them yourself An AWS Marketplace AMI: an AMI someone else made (and potentially sells) EC2 Image Builder#Used to automate the creation of Virtual Machines or container images</description>
    </item>
    <item>
      <title>Encryption</title>
      <link>https://dangpham112000.github.io/docs/research/encryption/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/encryption/</guid>
      <description>Encryption#</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://dangpham112000.github.io/docs/research/security/</link>
      <pubDate>Wed, 15 Nov 2023 01:47:46 +0700</pubDate>
      <guid>https://dangpham112000.github.io/docs/research/security/</guid>
      <description>Security#DDOS#Backdoor attack#SQL injection#Cross-site scripting (XSS) attack#Cross-site request forgery (CSRF) attack#Cross-domain access attack#Syn flood attack#Relay attack#Man in the middle attack#request modify#response modify#</description>
    </item>
  </channel>
</rss>
